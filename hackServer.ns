/** @param {NS} ns **/
//https://bitburner.readthedocs.io/en/latest/netscript/advancedfunctions/autocomplete.html
export function autocomplete(data, args) {
	return [...data.servers]; // This script autocompletes the list of servers.
	return [...data.servers, ...data.scripts]; // Autocomplete servers and scripts
	//return ["low", "medium", "high"]; // Autocomplete 3 specific strings.
}

//returns true if succesfully hacked (gained root access)
export function hackServer(ns, target) {
	//Defining things to use, also to avoid dynamic/static ram error
	let portsOpened = 0;
	const programs = ['BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',
		'HTTPWorm.exe', 'SQLInject.exe']
	const funcs = [ns.brutessh, ns.ftpcrack, ns.relaysmtp,
	ns.httpworm, ns.sqlinject]
	//open ports
	programs.forEach((prog, idx) => {
		if (ns.fileExists(prog, "home")) {
			funcs[idx](target);//f() must be in order
			portsOpened++;
		}
	})
	//check if enough
	let requiredPorts = ns.getServerNumPortsRequired(target)
	if (portsOpened < requiredPorts) {
		ns.tprintf(`ERROR [${target}] needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);
		return false;
	}
	//try to hack
	ns.nuke(target);

	if (!ns.hasRootAccess(target)) {
		ns.tprintf(`ERROR Couldn't hack [${target}]`)
		return false
	}
	else
		return true
}

//tries to hack a server and load moneymaker script into it
export async function main(ns) {
	var target = ns.args[0];
	var script = ns.args[1] || 'moneyMaker.ns';
	if (!ns.serverExists(target)) {
		ns.tprint(`ERROR: Server ${target} does not exist`)
		return
	}
	//start hacking
	if (!hackServer(ns, target)) {
		ns.tprint(`ERROR: Server ${target} coudln't be hacked.`)
		return
	}

	let ans = await ns.scp(script, target);
	if (ans)
		ns.tprint(`The server ${target} has been successfully hacked, ${script} is waiting to be run`)
	else
		ns.tprint(`ERROR with: ${target}. ${script} Couldn't be copied `)
}