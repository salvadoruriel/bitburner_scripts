{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":165,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1,\"hacking_speed_mult\":1,\"hacking_money_mult\":1,\"hacking_grow_mult\":1,\"hacking_exp\":90349.09313854577,\"strength_exp\":3.6949999999999923,\"defense_exp\":3.6949999999999923,\"dexterity_exp\":3.6949999999999923,\"agility_exp\":3.6949999999999923,\"charisma_exp\":10.659999999999943,\"intelligence_exp\":0,\"hacking_mult\":1,\"strength_mult\":1,\"defense_mult\":1,\"dexterity_mult\":1,\"agility_mult\":1,\"charisma_mult\":1,\"hacking_exp_mult\":1,\"strength_exp_mult\":1,\"defense_exp_mult\":1,\"dexterity_exp_mult\":1,\"agility_exp_mult\":1,\"charisma_exp_mult\":1,\"company_rep_mult\":1,\"faction_rep_mult\":1,\"money\":53500382.81906847,\"city\":\"Sector-12\",\"location\":\"Alpha Enterprises\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":100,\"moneyGainRatePerSecond\":544.4883699944517,\"onlineTimeSeconds\":60737.59999980098,\"ram\":16,\"totalMoneyGenerated\":21968005.899846263,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":91,\"moneyGainRatePerSecond\":495.48441669495105,\"onlineTimeSeconds\":60018.39999979836,\"ram\":16,\"totalMoneyGenerated\":17118723.088841453,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":91,\"moneyGainRatePerSecond\":495.48441669495105,\"onlineTimeSeconds\":58426.59999979257,\"ram\":16,\"totalMoneyGenerated\":16594146.939936321,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":91,\"moneyGainRatePerSecond\":495.48441669495105,\"onlineTimeSeconds\":58421.599999792554,\"ram\":16,\"totalMoneyGenerated\":16634478.019330287,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":91,\"moneyGainRatePerSecond\":495.48441669495105,\"onlineTimeSeconds\":56132.19999978422,\"ram\":16,\"totalMoneyGenerated\":16378409.970162598,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":91,\"moneyGainRatePerSecond\":495.48441669495105,\"onlineTimeSeconds\":56131.79999978422,\"ram\":16,\"totalMoneyGenerated\":16279843.000288885,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":91,\"moneyGainRatePerSecond\":495.48441669495105,\"onlineTimeSeconds\":56130.199999784214,\"ram\":16,\"totalMoneyGenerated\":16000076.478196446,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":91,\"moneyGainRatePerSecond\":495.48441669495105,\"onlineTimeSeconds\":56127.99999978421,\"ram\":16,\"totalMoneyGenerated\":15068190.284794744,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":7,\"level\":91,\"moneyGainRatePerSecond\":457.37023079533947,\"onlineTimeSeconds\":43333.39999986598,\"ram\":16,\"totalMoneyGenerated\":11911005.702408025,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":91,\"moneyGainRatePerSecond\":228.68511539766973,\"onlineTimeSeconds\":43333.39999986598,\"ram\":16,\"totalMoneyGenerated\":9718826.48725564,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":91,\"moneyGainRatePerSecond\":228.68511539766973,\"onlineTimeSeconds\":43312.39999986638,\"ram\":16,\"totalMoneyGenerated\":9659058.65677326,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":91,\"moneyGainRatePerSecond\":228.68511539766973,\"onlineTimeSeconds\":43309.39999986644,\"ram\":16,\"totalMoneyGenerated\":9619458.530818366,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":91,\"moneyGainRatePerSecond\":228.68511539766973,\"onlineTimeSeconds\":43306.399999866495,\"ram\":16,\"totalMoneyGenerated\":9580120.908512758,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":91,\"moneyGainRatePerSecond\":228.68511539766973,\"onlineTimeSeconds\":43303.39999986655,\"ram\":16,\"totalMoneyGenerated\":9542351.839908576,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":91,\"moneyGainRatePerSecond\":228.68511539766973,\"onlineTimeSeconds\":43300.39999986661,\"ram\":16,\"totalMoneyGenerated\":9506006.289076831,\"name\":\"hacknet-node-14\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\"],\"factionInvitations\":[\"Netburners\",\"Sector-12\"],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"}],\"augmentations\":[],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1,\"crime_success_mult\":1,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":1,\"workExpMult\":1,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":25,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":900000,\"work_money_mult\":1,\"hacknet_node_money_mult\":1,\"hacknet_node_purchase_cost_mult\":1,\"hacknet_node_ram_cost_mult\":1,\"hacknet_node_core_cost_mult\":1,\"hacknet_node_level_cost_mult\":1,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1639683443194,\"totalPlaytime\":64013400,\"playtimeSinceLastAug\":64013400,\"playtimeSinceLastBitnode\":64013400,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":18527007.82744775,\"hacknet\":205578702.0939563,\"hacknet_expenses\":-161903209.23198244,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":53499382.81906849,\"work\":6626,\"servers\":-1009743.8720000001,\"other\":-200000,\"augmentations\":-7500000}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":18527007.82744775,\"hacknet\":205578702.0939563,\"hacknet_expenses\":-161903209.23198244,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":53499382.81906849,\"work\":6626,\"servers\":-1009743.8720000001,\"other\":-200000,\"augmentations\":-7500000}},\"scriptProdSinceLastAug\":12718651,\"exploits\":[],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"84.8.7.2\",\"isConnectedTo\":true,\"maxRam\":16,\"messages\":[\"j0.msg\",\"j1.msg\",\"csec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\",\"FTPCrack.exe\",\"AutoLink.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//ready to be run script to get Money and handle gains/security\\nexport async function main(ns) {\\n\\tconst target = ns.args[0] || ns.getHostname();\\n\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.8;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target)\\n\\t}\\n}\",\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///03ef86bf-866a-44bf-9efb-b1e580a2691b\",\"module\":\"\",\"dependencies\":[{\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///03ef86bf-866a-44bf-9efb-b1e580a2691b\"}],\"ramUsage\":2.45,\"server\":\"home\",\"moduleSequenceNumber\":73}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//Shows info about all running scripts on given host argument (default: currentMachine)\\n\\nexport async function main(ns) {\\n\\tconst hostname = ns.args[0] || ns.getHostname();\\n\\tconst scripts = ns.ps(hostname);\\n\\tif (scripts.length === 0)\\n\\t\\tns.tprintf(`No scripts are running in \\\"${hostname}\\\" server`);\\n\\tfor (let i = 0; i < scripts.length; i++) {\\n\\t\\tns.tprintf(`*${scripts[i].filename} is running with ${scripts[i].threads} threads`)\\n\\t\\tns.tprintf(`---pid: ${scripts[i].pid}`)\\n\\t\\tns.tprintf(`---args: ${scripts[i].args}`)\\n\\t}\\n}\",\"filename\":\"getRunningScripts.ns\",\"url\":\"blob:file:///c34747d8-67c8-4c7e-9083-358aca7cb09d\",\"module\":\"\",\"dependencies\":[{\"filename\":\"getRunningScripts.ns\",\"url\":\"blob:file:///c34747d8-67c8-4c7e-9083-358aca7cb09d\"}],\"ramUsage\":1.85,\"server\":\"home\",\"moduleSequenceNumber\":74}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//original from:\\n//https://bitburner.readthedocs.io/en/latest/netscript/netscripthacknetnodeapi.html\\nexport async function main(ns) {\\n\\tfunction myMoney() {\\n\\t\\treturn ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t}\\n\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tconst cnt = ns.args[0] || Math.max(8, ns.hacknet.numNodes()); //count of hacknet nodes\\n\\tconst maxLevel = ns.args[1] || 90;\\n\\tconst maxRam = ns.args[2] || 16;\\n\\tconst maxCores = ns.args[3] || 8;\\n\\n\\twhile (ns.hacknet.numNodes() < cnt) {\\n\\t\\tlet res = ns.hacknet.purchaseNode();\\n\\t\\tns.print(\\\"-*-Purchased hacknet Node with index \\\" + res);\\n\\t\\tawait ns.sleep(3000)\\n\\t};\\n\\tns.print(`**All [${cnt}] nodes bought.`);\\n\\n\\tfor (var i = 0; i < cnt; i++) {\\n\\t\\twhile (ns.hacknet.getNodeStats(i).level <= maxLevel) {\\n\\t\\t\\tvar cost = ns.hacknet.getLevelUpgradeCost(i, 1);\\n\\t\\t\\twhile (myMoney() < cost) {\\n\\t\\t\\t\\tns.print(\\\"LEVEL: Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\n\\t\\t\\t\\tawait ns.sleep(3000);\\n\\t\\t\\t}\\n\\t\\t\\tlet res = ns.hacknet.upgradeLevel(i, 1);\\n\\t\\t\\tns.print(`-*-Upgraded LEVEL of Node (${i}): ${res}`);\\n\\t\\t};\\n\\t};\\n\\n\\tns.print(`**All [${cnt}] nodes upgraded to level [${maxLevel}]`);\\n\\n\\tfor (var i = 0; i < cnt; i++) {\\n\\t\\twhile (ns.hacknet.getNodeStats(i).ram < maxRam) {\\n\\t\\t\\tvar cost = ns.hacknet.getRamUpgradeCost(i, 1);\\n\\t\\t\\twhile (myMoney() < cost) {\\n\\t\\t\\t\\tns.print(\\\"RAM: Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\n\\t\\t\\t\\tawait ns.sleep(3000);\\n\\t\\t\\t}\\n\\t\\t\\tlet res = ns.hacknet.upgradeRam(i, 1);\\n\\t\\t\\tns.print(`-*-Upgraded RAM of Node (${i}): ${res}`);\\n\\t\\t};\\n\\t};\\n\\n\\tns.print(`**All [${cnt}] nodes upgraded to [${maxRam}]GB RAM`);\\n\\n\\tfor (var i = 0; i < cnt; i++) {\\n\\t\\twhile (ns.hacknet.getNodeStats(i).cores < maxCores) {\\n\\t\\t\\tvar cost = ns.hacknet.getCoreUpgradeCost(i, 1);\\n\\t\\t\\twhile (myMoney() < cost) {\\n\\t\\t\\t\\tns.print(\\\"CORES: Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\n\\t\\t\\t\\tawait ns.sleep(3000);\\n\\t\\t\\t}\\n\\t\\t\\tlet res = ns.hacknet.upgradeCore(i, 1);\\n\\t\\t\\tns.print(`-*-Upgraded CORE of Node (${i}): ${res}`);\\n\\t\\t};\\n\\t};\\n\\n\\tns.print(`**All [${cnt}] nodes upgraded to [${maxCores}] cores`);\\n\\n\\tns.tprint(`**All [${cnt}] Hacknet cores upgraded to the max.`);\\n}\",\"filename\":\"upgradeHacknet.ns\",\"url\":\"blob:file:///bbc2b487-9494-4e83-be32-a68f4e793f10\",\"module\":\"\",\"dependencies\":[{\"filename\":\"upgradeHacknet.ns\",\"url\":\"blob:file:///bbc2b487-9494-4e83-be32-a68f4e793f10\"}],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":75}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//https://bitburner.readthedocs.io/en/latest/netscript/advancedfunctions/autocomplete.html\\nexport function autocomplete(data, args) {\\n    return [...data.servers]; // This script autocompletes the list of servers.\\n    return [...data.servers, ...data.scripts]; // Autocomplete servers and scripts\\n    //return [\\\"low\\\", \\\"medium\\\", \\\"high\\\"]; // Autocomplete 3 specific strings.\\n}\\n\\n//script automation to hack a server, will directly go an try all exes as needed\\nexport async function main(ns) {\\n\\tvar target = ns.args[0];\\n\\tvar script = ns.args[1] || 'moneyMaker.ns';\\n\\tif (!ns.serverExists(target)) {\\n\\t\\tns.tprint(`ERROR: Server ${target} does not exist`)\\n\\t\\treturn\\n\\t}\\n\\t//start hacking\\n\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\tns.brutessh(target);\\n\\t}\\n\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\tns.ftpcrack(target);\\n\\t}\\n\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\tns.relaysmtp(target);\\n\\t}\\n\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\tns.httpworm(target);\\n\\t}\\n\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\tns.sqlinject(target);\\n\\t}\\n\\tns.nuke(target);\\n\\n\\tif (!ns.hasRootAccess(target)) {\\n\\t\\tns.tprint(`ERROR: Server ${target} coudln't be hacked.`)\\n\\t}\\n\\n\\tlet ans = await ns.scp(script, target);\\n\\tif (ans)\\n\\t\\tns.tprint(`The server ${target} has been successfully hacked, ${script} is waiting to be run`)\\n\\telse\\n\\t\\tns.tprint(`ERROR with: ${target}. ${script} Couldn't be copied `)\\n}\",\"filename\":\"hackServer.ns\",\"url\":\"blob:file:///345def82-740e-47ed-acea-bb55acb3b6d6\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackServer.ns\",\"url\":\"blob:file:///345def82-740e-47ed-acea-bb55acb3b6d6\"}],\"ramUsage\":2.75,\"server\":\"home\",\"moduleSequenceNumber\":76}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack all close servers & SPREAD both money maker & same script\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0 || host === 'home') {\\n\\t\\tns.tprint(`ERROR ${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`Running ${moneyMaker} with ${threads} `)\\n\\tns.spawn(moneyMaker, threads);\\n\\tns.killall(host);\\n}\",\"filename\":\"hackSpreadServers.ns\",\"url\":\"blob:file:///e585533a-11f5-4bcd-8a74-b8cf3413a6fc\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackSpreadServers.ns\",\"url\":\"blob:file:///e585533a-11f5-4bcd-8a74-b8cf3413a6fc\"}],\"ramUsage\":5.65,\"server\":\"home\",\"moduleSequenceNumber\":77}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//lighter version, still infect but try and save RAM\\n// REQUIRES RUNNING moneyMaker MANUALLY\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\tns.tprintf(`WARN: Also run moneyMaker manually.`);\\n}\",\"filename\":\"hackSpreadServers-LIGHT.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"home\",\"moduleSequenceNumber\":78}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack server, SPREAD itself & run moneymaker as max as possible\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}] Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]--${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t\\t//proceed to execute virus in remote pc\\n\\t\\tif (ns.exec(spreadVirus, target, 1, host))\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--*${spreadVirus} spreading itself.`)\\n\\t\\telse {\\n\\t\\t\\t//try to run lighter version\\n\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}] ${spreadVirus} couldn't spread itself maybe low ram?.`)\\n\\t\\t\\tif (ns.exec(lightVirus, target)) {\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]${lightVirus} was ran instead.`)\\n\\t\\t\\t\\t//now try to run moneyMaker\\n\\t\\t\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t\\t\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\t\\t\\t\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\t\\t\\t\\tif (threads === 0) {\\n\\t\\t\\t\\t\\tns.tprint(`ERROR[${host}]>>>[${target}]${moneyMaker} can't be run in this server: ${target}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]threads\\t\\t-\\t${threads}`)\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\twhile (ns.isRunning(lightVirus, target))\\n\\t\\t\\t\\t\\tawait ns.sleep(3000) //give time for lightVirus to spread and then run\\n\\t\\t\\t\\tif (ns.exec(moneyMaker, target, threads))\\n\\t\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${moneyMaker} was ran successfully .`)\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]${moneyMaker} wasn't run on target. How?`)\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] even ${lightVirus} couldn't be run, virus wasn't spread from here.`)\\n\\t\\t}\\n\\t}//)\\n\\tif (host === 'home') return\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0) {\\n\\t\\tns.tprint(`ERROR[${host}]${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR[${host}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR[${host}]threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`INFO[${host}]Running ${moneyMaker} with ${threads} threads`)\\n\\t//ns.exec(moneyMaker, host, threads)\\n\\tns.spawn(moneyMaker, threads);\\n}\",\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///46a74c0e-11af-4822-ae41-c25b79ad8862\",\"module\":{},\"dependencies\":[{\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///46a74c0e-11af-4822-ae41-c25b79ad8862\"}],\"ramUsage\":6.55,\"server\":\"home\",\"moduleSequenceNumber\":145}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//Lighter version, DOESN'T EXECUTE ANYTHING, so it is basically the last branch in execution\\n\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO LIGHT[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`LIGHT[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR LIGHT[${host}]>>>[${target}]Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN LIGHT[${host}]>>>[${target}] with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n}\",\"filename\":\"LIGHT-selfSpread.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"home\",\"moduleSequenceNumber\":80}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n    ns.tprintf('INFO---available log colors:')\\n    ns.tprintf('INFOthey only need to be at the start')\\n    ns.tprintf(`otherwise INFO or others won't work`)\\n    ns.tprintf('WARN this is a warning')\\n    ns.tprintf('WARNING this is also warning')\\n    ns.tprintf('ERROR this is an error')\\n}\",\"filename\":\"consoleColors.ns\",\"url\":\"blob:file:///e7eeb2c1-ca01-4f1e-a851-e8a782c3df84\",\"module\":\"\",\"dependencies\":[{\"filename\":\"consoleColors.ns\",\"url\":\"blob:file:///e7eeb2c1-ca01-4f1e-a851-e8a782c3df84\"}],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":81}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.004,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"80.6.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":69809402420,\"moneyMax\":1745235060500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1291,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"25.4.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":46826633728,\"moneyMax\":1170665843200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1255,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-757591.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(())(((()((a))((())(\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-691550.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[42,41,26]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"60.6.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":21642868470,\"moneyMax\":541071711750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1073,\"serverGrowth\":69}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"66.8.3.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":38280487972,\"moneyMax\":957012199300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1003,\"serverGrowth\":65}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-552287.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[14,21,15,46,38,36,38,14,5,41,29,7],[50,1,34,11,25,26,27,1,24,40,50,31],[25,18,16,9,10,31,19,21,11,39,3,3],[43,45,22,18,21,3,47,44,1,12,8,10],[33,35,27,36,2,33,43,46,36,35,13,46],[41,46,40,34,18,21,43,37,35,6,43,11],[19,15,45,49,19,36,38,36,41,32,49,2]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-267710.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[22,71,12,118,167,46,78,25,137,149,4,27,157,88,5,33,121,177,13],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"13.2.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":34109504372,\"moneyMax\":852737609300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1177,\"serverGrowth\":67}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"79.5.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":18623043327,\"moneyMax\":465576083175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1021,\"serverGrowth\":74}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"59.3.9.4\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":18715011843,\"moneyMax\":467875296075,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":967,\"serverGrowth\":96}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-274855.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[6,1],[9,2,4]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"12.1.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":18220267524,\"moneyMax\":455506688100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1173,\"serverGrowth\":95}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"7.6.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"blade\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":22119754436,\"moneyMax\":552993860900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1107,\"serverGrowth\":97}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"84.4.2.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":1741967156,\"moneyMax\":43549178900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1145,\"serverGrowth\":91}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"56.0.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1170,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-495635.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[144,72,190,78,73,190,158,108,154,81,19,9,191,147,89,18,139]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"73.4.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":1140906100,\"moneyMax\":28522652500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1021,\"serverGrowth\":81}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"81.6.3.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":847088118,\"moneyMax\":21177202950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1040,\"serverGrowth\":72}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"69.4.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":858086009,\"moneyMax\":21452150225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":898,\"serverGrowth\":56}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-498791-CyberSec.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[28,29,2,33,23,39,5,18,10,10],[16,21,44,41,2,4,18,18,38,6],[12,37,13,30,16,26,2,26,8,16],[21,43,8,46,18,42,37,41,21,44]],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"27.5.0.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":693615212,\"moneyMax\":17340380300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":853,\"serverGrowth\":78}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"76.5.3.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":758549559,\"moneyMax\":18963738975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":855,\"serverGrowth\":60}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"35.5.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":919297700,\"moneyMax\":22982442500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":897,\"serverGrowth\":89}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"32.3.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1151782473,\"moneyMax\":28794561825,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":880,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"94.8.3.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"stormtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":834611407,\"moneyMax\":20865285175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":826,\"serverGrowth\":74}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"78.7.6.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":561935802,\"moneyMax\":14048395050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":862,\"serverGrowth\":83}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-74393.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[9,12],[14,16],[20,26],[5,6],[5,13],[13,23],[9,12],[11,19],[20,26],[2,8]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"62.8.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":829540901,\"moneyMax\":20738522525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":939,\"serverGrowth\":79}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-107710.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"8362975920\",-74],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"82.2.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":833533184,\"moneyMax\":20838329600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":826,\"serverGrowth\":84}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"5.1.1.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1178806368,\"moneyMax\":29470159200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":924,\"serverGrowth\":60}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-408018.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,0,0],[0,0,0,0,0],[0,0,0,1,0]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-940687.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[13,3],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"74.3.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"icarus\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":951929571,\"moneyMax\":23798239275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":935,\"serverGrowth\":60}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"29.6.7.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":1005053399,\"moneyMax\":25126334975,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":806,\"serverGrowth\":70}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"77.2.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":888017268,\"moneyMax\":22200431700,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":808,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"97.7.2.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":874345980,\"moneyMax\":21858649500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":813,\"serverGrowth\":74}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"99.7.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1311993432,\"moneyMax\":32799835800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":860,\"serverGrowth\":63}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-938069.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[22,26],[12,19],[16,22],[10,18],[15,23],[18,21],[23,26],[23,24],[8,10],[11,17],[10,13],[1,8],[3,4],[17,21]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"0.7.1.4\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1562418437,\"moneyMax\":39060460925,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":772,\"serverGrowth\":84}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"46.3.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":1131887553,\"moneyMax\":28297188825,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":836,\"serverGrowth\":78}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"84.6.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1304177166,\"moneyMax\":32604429150,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":822,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"21.3.2.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":1048615290,\"moneyMax\":26215382250,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":776,\"serverGrowth\":76}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-352708.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[22,139,95,143,144,77,142,74,193,191,156,24,98,50,200,66,94,142,128,122,171,36,150,141,28,122,167,129,26,165,8,25,33,9,129,85,25,142,32,75,147,43,173,140,139,2,68,126,133]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"36.2.6.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":747614118,\"moneyMax\":18690352950,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":699,\"serverGrowth\":63}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"56.9.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":547040067,\"moneyMax\":13676001675,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":475,\"serverGrowth\":49}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"21.8.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"aerocorp\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":734820198,\"moneyMax\":18370504950,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":538,\"serverGrowth\":60}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"5.8.6.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":204421068,\"moneyMax\":5110526700,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":412,\"serverGrowth\":35}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"99.2.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":203211617,\"moneyMax\":5080290425,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":418,\"serverGrowth\":40}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"5.3.4.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":1094427024,\"moneyMax\":27360675600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":760,\"serverGrowth\":83}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"99.7.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":281300209,\"moneyMax\":7032505225,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":448,\"serverGrowth\":53}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"87.4.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\",\"rho-construction\",\"alpha-ent\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":428696264,\"moneyMax\":10717406600,\"numOpenPortsRequired\":4,\"openPortCount\":2,\"requiredHackingSkill\":648,\"serverGrowth\":65}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"34.4.9.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":523380500,\"moneyMax\":13084512500,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":409,\"serverGrowth\":36}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-408210.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1],[0,0,0,0],[0,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"21.6.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":31.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"moneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1086.4100000001101,\"pid\":30,\"ramUsage\":2.45,\"server\":\"the-hub\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//ready to be run script to get Money and handle gains/security\\nexport async function main(ns) {\\n\\tconst target = ns.args[0] || ns.getHostname();\\n\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.8;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target)\\n\\t}\\n}\",\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///1b0f5e66-930e-4f54-a3bd-f9cf7bb185f6\",\"module\":{},\"dependencies\":[{\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///1b0f5e66-930e-4f54-a3bd-f9cf7bb185f6\"}],\"ramUsage\":2.45,\"server\":\"the-hub\",\"moduleSequenceNumber\":216}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack server, SPREAD itself & run moneymaker as max as possible\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}] Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]--${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t\\t//proceed to execute virus in remote pc\\n\\t\\tif (ns.exec(spreadVirus, target, 1, host))\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--*${spreadVirus} spreading itself.`)\\n\\t\\telse {\\n\\t\\t\\t//try to run lighter version\\n\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}] ${spreadVirus} couldn't spread itself maybe low ram?.`)\\n\\t\\t\\tif (ns.exec(lightVirus, target)) {\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]${lightVirus} was ran instead.`)\\n\\t\\t\\t\\t//now try to run moneyMaker\\n\\t\\t\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t\\t\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\t\\t\\t\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\t\\t\\t\\tif (threads === 0) {\\n\\t\\t\\t\\t\\tns.tprint(`ERROR[${host}]>>>[${target}]${moneyMaker} can't be run in this server: ${target}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]threads\\t\\t-\\t${threads}`)\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\twhile (ns.isRunning(lightVirus, target))\\n\\t\\t\\t\\t\\tawait ns.sleep(3000) //give time for lightVirus to spread and then run\\n\\t\\t\\t\\tif (ns.exec(moneyMaker, target, threads))\\n\\t\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${moneyMaker} was ran successfully .`)\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]${moneyMaker} wasn't run on target. How?`)\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] even ${lightVirus} couldn't be run, virus wasn't spread from here.`)\\n\\t\\t}\\n\\t}//)\\n\\tif (host === 'home') return\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0) {\\n\\t\\tns.tprint(`ERROR[${host}]${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR[${host}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR[${host}]threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`INFO[${host}]Running ${moneyMaker} with ${threads} threads`)\\n\\t//ns.exec(moneyMaker, host, threads)\\n\\tns.spawn(moneyMaker, threads);\\n}\",\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///3e6911d4-a161-4bd2-9b9a-c7d76eaa78e0\",\"module\":{},\"dependencies\":[{\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///3e6911d4-a161-4bd2-9b9a-c7d76eaa78e0\"}],\"ramUsage\":6.55,\"server\":\"the-hub\",\"moduleSequenceNumber\":202}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//Lighter version, DOESN'T EXECUTE ANYTHING, so it is basically the last branch in execution\\n\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO LIGHT[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`LIGHT[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR LIGHT[${host}]>>>[${target}]Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN LIGHT[${host}]>>>[${target}] with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n}\",\"filename\":\"LIGHT-selfSpread.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"the-hub\",\"moduleSequenceNumber\":201}}],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":37,\"minDifficulty\":12,\"moneyAvailable\":175329286,\"moneyMax\":4383232150,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":297,\"serverGrowth\":54}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"1.3.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":241900665,\"moneyMax\":6047516625,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":373,\"serverGrowth\":45}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"49.2.2.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":399,\"serverGrowth\":47}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"35.1.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//ready to be run script to get Money and handle gains/security\\nexport async function main(ns) {\\n\\tconst target = ns.args[0] || ns.getHostname();\\n\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.8;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target)\\n\\t}\\n}\",\"filename\":\"moneyMaker.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":178}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack server, SPREAD itself & run moneymaker as max as possible\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}] Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]--${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t\\t//proceed to execute virus in remote pc\\n\\t\\tif (ns.exec(spreadVirus, target, 1, host))\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--*${spreadVirus} spreading itself.`)\\n\\t\\telse {\\n\\t\\t\\t//try to run lighter version\\n\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}] ${spreadVirus} couldn't spread itself maybe low ram?.`)\\n\\t\\t\\tif (ns.exec(lightVirus, target)) {\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]${lightVirus} was ran instead.`)\\n\\t\\t\\t\\t//now try to run moneyMaker\\n\\t\\t\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t\\t\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\t\\t\\t\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\t\\t\\t\\tif (threads === 0) {\\n\\t\\t\\t\\t\\tns.tprint(`ERROR[${host}]>>>[${target}]${moneyMaker} can't be run in this server: ${target}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]threads\\t\\t-\\t${threads}`)\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\twhile (ns.isRunning(lightVirus, target))\\n\\t\\t\\t\\t\\tawait ns.sleep(3000) //give time for lightVirus to spread and then run\\n\\t\\t\\t\\tif (ns.exec(moneyMaker, target, threads))\\n\\t\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${moneyMaker} was ran successfully .`)\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]${moneyMaker} wasn't run on target. How?`)\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] even ${lightVirus} couldn't be run, virus wasn't spread from here.`)\\n\\t\\t}\\n\\t}//)\\n\\tif (host === 'home') return\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0) {\\n\\t\\tns.tprint(`ERROR[${host}]${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR[${host}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR[${host}]threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`INFO[${host}]Running ${moneyMaker} with ${threads} threads`)\\n\\t//ns.exec(moneyMaker, host, threads)\\n\\tns.spawn(moneyMaker, threads);\\n}\",\"filename\":\"selfSpread.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.55,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":180}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//Lighter version, DOESN'T EXECUTE ANYTHING, so it is basically the last branch in execution\\n\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO LIGHT[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`LIGHT[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR LIGHT[${host}]>>>[${target}]Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN LIGHT[${host}]>>>[${target}] with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n}\",\"filename\":\"LIGHT-selfSpread.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":182}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":37,\"minDifficulty\":12,\"moneyAvailable\":76397805,\"moneyMax\":1909945125,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":271,\"serverGrowth\":59}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"58.1.5.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//ready to be run script to get Money and handle gains/security\\nexport async function main(ns) {\\n\\tconst target = ns.args[0] || ns.getHostname();\\n\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.8;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target)\\n\\t}\\n}\",\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///dfc59f05-9114-4a1b-b7e0-8446151b96cd\",\"module\":\"\",\"dependencies\":[{\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///dfc59f05-9114-4a1b-b7e0-8446151b96cd\"}],\"ramUsage\":2.45,\"server\":\"n00dles\",\"moduleSequenceNumber\":82}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack all close servers & SPREAD both money maker & same script\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0 || host === 'home') {\\n\\t\\tns.tprint(`ERROR ${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`Running ${moneyMaker} with ${threads} `)\\n\\tns.spawn(moneyMaker, threads)\\n}\",\"filename\":\"hackSpreadServers.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.15,\"server\":\"n00dles\",\"moduleSequenceNumber\":83}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//lighter version, still infect but try and save RAM\\n// REQUIRES RUNNING moneyMaker MANUALLY\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\tns.tprintf(`WARN: Also run moneyMaker manually.`);\\n}\",\"filename\":\"hackSpreadServers-LIGHT.ns\",\"url\":\"blob:file:///780caaab-ef36-4633-ae99-1f5c8eb8ad5f\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackSpreadServers-LIGHT.ns\",\"url\":\"blob:file:///780caaab-ef36-4633-ae99-1f5c8eb8ad5f\"}],\"ramUsage\":3,\"server\":\"n00dles\",\"moduleSequenceNumber\":84}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack server, SPREAD itself & run moneymaker as max as possible\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}] Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]--${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t\\t//proceed to execute virus in remote pc\\n\\t\\tif (ns.exec(spreadVirus, target, 1, host))\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--*${spreadVirus} spreading itself.`)\\n\\t\\telse {\\n\\t\\t\\t//try to run lighter version\\n\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}] ${spreadVirus} couldn't spread itself maybe low ram?.`)\\n\\t\\t\\tif (ns.exec(lightVirus, target)) {\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]${lightVirus} was ran instead.`)\\n\\t\\t\\t\\t//now try to run moneyMaker\\n\\t\\t\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t\\t\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\t\\t\\t\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\t\\t\\t\\tif (threads === 0) {\\n\\t\\t\\t\\t\\tns.tprint(`ERROR[${host}]>>>[${target}]${moneyMaker} can't be run in this server: ${target}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]threads\\t\\t-\\t${threads}`)\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\twhile (ns.isRunning(lightVirus, target))\\n\\t\\t\\t\\t\\tawait ns.sleep(3000) //give time for lightVirus to spread and then run\\n\\t\\t\\t\\tif (ns.exec(moneyMaker, target, threads))\\n\\t\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${moneyMaker} was ran successfully .`)\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]${moneyMaker} wasn't run on target. How?`)\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] even ${lightVirus} couldn't be run, virus wasn't spread from here.`)\\n\\t\\t}\\n\\t}//)\\n\\tif (host === 'home') return\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0) {\\n\\t\\tns.tprint(`ERROR[${host}]${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR[${host}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR[${host}]threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`INFO[${host}]Running ${moneyMaker} with ${threads} threads`)\\n\\t//ns.exec(moneyMaker, host, threads)\\n\\tns.spawn(moneyMaker, threads);\\n}\",\"filename\":\"selfSpread.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.55,\"server\":\"n00dles\",\"moduleSequenceNumber\":85}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//Lighter version, DOESN'T EXECUTE ANYTHING, so it is basically the last branch in execution\\n\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO LIGHT[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`LIGHT[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR LIGHT[${host}]>>>[${target}]Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN LIGHT[${host}]>>>[${target}] with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n}\",\"filename\":\"LIGHT-selfSpread.ns\",\"url\":\"blob:file:///dafa7c9c-c220-476e-8b94-ccdcc2daf42a\",\"module\":{},\"dependencies\":[{\"filename\":\"LIGHT-selfSpread.ns\",\"url\":\"blob:file:///dafa7c9c-c220-476e-8b94-ccdcc2daf42a\"}],\"ramUsage\":3,\"server\":\"n00dles\",\"moduleSequenceNumber\":146}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":3.001999999999674,\"minDifficulty\":1,\"moneyAvailable\":1519175.083763355,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"80.7.7.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[0,0,150,12]},\"filename\":\"moneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":972,\"onlineMoneyMade\":0,\"onlineRunningTime\":1086.6100000001102,\"pid\":17,\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//ready to be run script to get Money and handle gains/security\\nexport async function main(ns) {\\n\\tconst target = ns.args[0] || ns.getHostname();\\n\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.8;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target)\\n\\t}\\n}\",\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///7d3655ba-f59f-477c-a432-fc627a80cab4\",\"module\":{},\"dependencies\":[{\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///7d3655ba-f59f-477c-a432-fc627a80cab4\"}],\"ramUsage\":2.45,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":203}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack all close servers\\n//\\tcopies moneyMaker.ns over the server and tries to run for itself and the server\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackCloseServers.ns';\\n\\tconst files = [moneyMaker, spreadVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprint(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprint(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\t\\t\\t\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0 || host === 'home') {\\n\\t\\tns.tprint(`ERROR MoneyMaker can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR scriptRam:\\t${scriptRam}`)\\n\\t\\tns.tprintf(`ERROR maxRam\\t:\\t${maxRam}`)\\n\\t\\treturn\\n\\t}\\n\\tspawn(moneyMaker, threads)\\n}\",\"filename\":\"hackCloseServers.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.15,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":88}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack all close servers & SPREAD both money maker & same script\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0 || host === 'home') {\\n\\t\\tns.tprint(`ERROR ${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`Running ${moneyMaker} with ${threads} `)\\n\\tns.spawn(moneyMaker, threads)\\n}\",\"filename\":\"hackSpreadServers.ns\",\"url\":\"blob:file:///7a026623-fae7-44df-8856-1a48c8f070d6\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackSpreadServers.ns\",\"url\":\"blob:file:///7a026623-fae7-44df-8856-1a48c8f070d6\"}],\"ramUsage\":5.15,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":89}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//lighter version, still infect but try and save RAM\\n// REQUIRES RUNNING moneyMaker MANUALLY\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\tns.tprintf(`WARN: Also run moneyMaker manually.`);\\n}\",\"filename\":\"hackSpreadServers-LIGHT.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":90}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack server, SPREAD itself & run moneymaker as max as possible\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}] Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]--${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t\\t//proceed to execute virus in remote pc\\n\\t\\tif (ns.exec(spreadVirus, target, 1, host))\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--*${spreadVirus} spreading itself.`)\\n\\t\\telse {\\n\\t\\t\\t//try to run lighter version\\n\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}] ${spreadVirus} couldn't spread itself maybe low ram?.`)\\n\\t\\t\\tif (ns.exec(lightVirus, target)) {\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]${lightVirus} was ran instead.`)\\n\\t\\t\\t\\t//now try to run moneyMaker\\n\\t\\t\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t\\t\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\t\\t\\t\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\t\\t\\t\\tif (threads === 0) {\\n\\t\\t\\t\\t\\tns.tprint(`ERROR[${host}]>>>[${target}]${moneyMaker} can't be run in this server: ${target}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]threads\\t\\t-\\t${threads}`)\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\twhile (ns.isRunning(lightVirus, target))\\n\\t\\t\\t\\t\\tawait ns.sleep(3000) //give time for lightVirus to spread and then run\\n\\t\\t\\t\\tif (ns.exec(moneyMaker, target, threads))\\n\\t\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${moneyMaker} was ran successfully .`)\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]${moneyMaker} wasn't run on target. How?`)\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] even ${lightVirus} couldn't be run, virus wasn't spread from here.`)\\n\\t\\t}\\n\\t}//)\\n\\tif (host === 'home') return\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0) {\\n\\t\\tns.tprint(`ERROR[${host}]${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR[${host}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR[${host}]threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`INFO[${host}]Running ${moneyMaker} with ${threads} threads`)\\n\\t//ns.exec(moneyMaker, host, threads)\\n\\tns.spawn(moneyMaker, threads);\\n}\",\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///0b91c332-9e3b-4e18-8355-d9a12baf273e\",\"module\":{},\"dependencies\":[{\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///0b91c332-9e3b-4e18-8355-d9a12baf273e\"}],\"ramUsage\":6.55,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":147}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//Lighter version, DOESN'T EXECUTE ANYTHING, so it is basically the last branch in execution\\n\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO LIGHT[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`LIGHT[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR LIGHT[${host}]>>>[${target}]Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN LIGHT[${host}]>>>[${target}] with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n}\",\"filename\":\"LIGHT-selfSpread.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":92}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":4.920000000000009,\"minDifficulty\":3,\"moneyAvailable\":3235428.1449527983,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"68.7.3.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"sigma-cosmetics\":[0,0,144,6]},\"filename\":\"moneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":900,\"onlineMoneyMade\":0,\"onlineRunningTime\":1086.6100000001102,\"pid\":18,\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//ready to be run script to get Money and handle gains/security\\nexport async function main(ns) {\\n\\tconst target = ns.args[0] || ns.getHostname();\\n\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.8;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target)\\n\\t}\\n}\",\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///a49a09a2-2133-48f9-8230-292a4fb71d67\",\"module\":{},\"dependencies\":[{\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///a49a09a2-2133-48f9-8230-292a4fb71d67\"}],\"ramUsage\":2.45,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":204}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack all close servers\\n//\\tcopies moneyMaker.ns over the server and tries to run for itself and the server\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackCloseServers.ns';\\n\\tconst files = [moneyMaker, spreadVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprint(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprint(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\t\\t\\t\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0 || host === 'home') {\\n\\t\\tns.tprint(`ERROR MoneyMaker can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR scriptRam:\\t${scriptRam}`)\\n\\t\\tns.tprintf(`ERROR maxRam\\t:\\t${maxRam}`)\\n\\t\\treturn\\n\\t}\\n\\tspawn(moneyMaker, threads)\\n}\",\"filename\":\"hackCloseServers.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.15,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":94}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack all close servers & SPREAD both money maker & same script\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0 || host === 'home') {\\n\\t\\tns.tprint(`ERROR ${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`Running ${moneyMaker} with ${threads} `)\\n\\tns.spawn(moneyMaker, threads)\\n}\",\"filename\":\"hackSpreadServers.ns\",\"url\":\"blob:file:///b5f1c768-94a4-44d6-9be4-d629dc60820a\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackSpreadServers.ns\",\"url\":\"blob:file:///b5f1c768-94a4-44d6-9be4-d629dc60820a\"}],\"ramUsage\":5.15,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":95}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//lighter version, still infect but try and save RAM\\n// REQUIRES RUNNING moneyMaker MANUALLY\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\tns.tprintf(`WARN: Also run moneyMaker manually.`);\\n}\",\"filename\":\"hackSpreadServers-LIGHT.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":96}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack server, SPREAD itself & run moneymaker as max as possible\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}] Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]--${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t\\t//proceed to execute virus in remote pc\\n\\t\\tif (ns.exec(spreadVirus, target, 1, host))\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--*${spreadVirus} spreading itself.`)\\n\\t\\telse {\\n\\t\\t\\t//try to run lighter version\\n\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}] ${spreadVirus} couldn't spread itself maybe low ram?.`)\\n\\t\\t\\tif (ns.exec(lightVirus, target)) {\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]${lightVirus} was ran instead.`)\\n\\t\\t\\t\\t//now try to run moneyMaker\\n\\t\\t\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t\\t\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\t\\t\\t\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\t\\t\\t\\tif (threads === 0) {\\n\\t\\t\\t\\t\\tns.tprint(`ERROR[${host}]>>>[${target}]${moneyMaker} can't be run in this server: ${target}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]threads\\t\\t-\\t${threads}`)\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\twhile (ns.isRunning(lightVirus, target))\\n\\t\\t\\t\\t\\tawait ns.sleep(3000) //give time for lightVirus to spread and then run\\n\\t\\t\\t\\tif (ns.exec(moneyMaker, target, threads))\\n\\t\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${moneyMaker} was ran successfully .`)\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]${moneyMaker} wasn't run on target. How?`)\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] even ${lightVirus} couldn't be run, virus wasn't spread from here.`)\\n\\t\\t}\\n\\t}//)\\n\\tif (host === 'home') return\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0) {\\n\\t\\tns.tprint(`ERROR[${host}]${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR[${host}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR[${host}]threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`INFO[${host}]Running ${moneyMaker} with ${threads} threads`)\\n\\t//ns.exec(moneyMaker, host, threads)\\n\\tns.spawn(moneyMaker, threads);\\n}\",\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///72cb267b-7fb2-4ba8-ab8c-e6ce1e7ab980\",\"module\":{},\"dependencies\":[{\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///72cb267b-7fb2-4ba8-ab8c-e6ce1e7ab980\"}],\"ramUsage\":6.55,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":148}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//Lighter version, DOESN'T EXECUTE ANYTHING, so it is basically the last branch in execution\\n\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO LIGHT[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`LIGHT[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR LIGHT[${host}]>>>[${target}]Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN LIGHT[${host}]>>>[${target}] with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n}\",\"filename\":\"LIGHT-selfSpread.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":98}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":10,\"hackDifficulty\":4.992000000000008,\"minDifficulty\":3,\"moneyAvailable\":5218754.541024515,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"64.2.9.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"joesguns\":[0,0,120,6]},\"filename\":\"moneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":945,\"onlineMoneyMade\":0,\"onlineRunningTime\":1086.6100000001102,\"pid\":19,\"ramUsage\":2.45,\"server\":\"joesguns\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//ready to be run script to get Money and handle gains/security\\nexport async function main(ns) {\\n\\tconst target = ns.args[0] || ns.getHostname();\\n\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.8;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target)\\n\\t}\\n}\",\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///8e11d71c-f106-4a07-b6fd-ed6739ff34b4\",\"module\":{},\"dependencies\":[{\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///8e11d71c-f106-4a07-b6fd-ed6739ff34b4\"}],\"ramUsage\":2.45,\"server\":\"joesguns\",\"moduleSequenceNumber\":205}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack all close servers\\n//\\tcopies moneyMaker.ns over the server and tries to run for itself and the server\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackCloseServers.ns';\\n\\tconst files = [moneyMaker, spreadVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprint(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprint(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\t\\t\\t\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0 || host === 'home') {\\n\\t\\tns.tprint(`ERROR MoneyMaker can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR scriptRam:\\t${scriptRam}`)\\n\\t\\tns.tprintf(`ERROR maxRam\\t:\\t${maxRam}`)\\n\\t\\treturn\\n\\t}\\n\\tspawn(moneyMaker, threads)\\n}\",\"filename\":\"hackCloseServers.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.15,\"server\":\"joesguns\",\"moduleSequenceNumber\":100}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack all close servers & SPREAD both money maker & same script\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0 || host === 'home') {\\n\\t\\tns.tprint(`ERROR ${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`Running ${moneyMaker} with ${threads} `)\\n\\tns.spawn(moneyMaker, threads)\\n}\",\"filename\":\"hackSpreadServers.ns\",\"url\":\"blob:file:///2539866f-9038-4537-8150-86e61b49263f\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackSpreadServers.ns\",\"url\":\"blob:file:///2539866f-9038-4537-8150-86e61b49263f\"}],\"ramUsage\":5.15,\"server\":\"joesguns\",\"moduleSequenceNumber\":101}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//lighter version, still infect but try and save RAM\\n// REQUIRES RUNNING moneyMaker MANUALLY\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\tns.tprintf(`WARN: Also run moneyMaker manually.`);\\n}\",\"filename\":\"hackSpreadServers-LIGHT.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"joesguns\",\"moduleSequenceNumber\":102}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack server, SPREAD itself & run moneymaker as max as possible\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}] Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]--${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t\\t//proceed to execute virus in remote pc\\n\\t\\tif (ns.exec(spreadVirus, target, 1, host))\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--*${spreadVirus} spreading itself.`)\\n\\t\\telse {\\n\\t\\t\\t//try to run lighter version\\n\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}] ${spreadVirus} couldn't spread itself maybe low ram?.`)\\n\\t\\t\\tif (ns.exec(lightVirus, target)) {\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]${lightVirus} was ran instead.`)\\n\\t\\t\\t\\t//now try to run moneyMaker\\n\\t\\t\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t\\t\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\t\\t\\t\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\t\\t\\t\\tif (threads === 0) {\\n\\t\\t\\t\\t\\tns.tprint(`ERROR[${host}]>>>[${target}]${moneyMaker} can't be run in this server: ${target}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]threads\\t\\t-\\t${threads}`)\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\twhile (ns.isRunning(lightVirus, target))\\n\\t\\t\\t\\t\\tawait ns.sleep(3000) //give time for lightVirus to spread and then run\\n\\t\\t\\t\\tif (ns.exec(moneyMaker, target, threads))\\n\\t\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${moneyMaker} was ran successfully .`)\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]${moneyMaker} wasn't run on target. How?`)\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] even ${lightVirus} couldn't be run, virus wasn't spread from here.`)\\n\\t\\t}\\n\\t}//)\\n\\tif (host === 'home') return\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0) {\\n\\t\\tns.tprint(`ERROR[${host}]${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR[${host}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR[${host}]threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`INFO[${host}]Running ${moneyMaker} with ${threads} threads`)\\n\\t//ns.exec(moneyMaker, host, threads)\\n\\tns.spawn(moneyMaker, threads);\\n}\",\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///45b0db13-3e85-4597-a099-706e536a346f\",\"module\":{},\"dependencies\":[{\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///45b0db13-3e85-4597-a099-706e536a346f\"}],\"ramUsage\":6.55,\"server\":\"joesguns\",\"moduleSequenceNumber\":149}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//Lighter version, DOESN'T EXECUTE ANYTHING, so it is basically the last branch in execution\\n\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO LIGHT[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`LIGHT[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR LIGHT[${host}]>>>[${target}]Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN LIGHT[${host}]>>>[${target}] with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n}\",\"filename\":\"LIGHT-selfSpread.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"joesguns\",\"moduleSequenceNumber\":104}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":6.908000000000007,\"minDifficulty\":5,\"moneyAvailable\":6211746.647881114,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"41.3.2.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"zer0\":[0,0,52,13]},\"filename\":\"moneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":682.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":1086.6100000001102,\"pid\":23,\"ramUsage\":2.45,\"server\":\"zer0\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//ready to be run script to get Money and handle gains/security\\nexport async function main(ns) {\\n\\tconst target = ns.args[0] || ns.getHostname();\\n\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.8;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target)\\n\\t}\\n}\",\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///b28fe4f6-a3a1-4e3d-9306-f508ef6062a5\",\"module\":{},\"dependencies\":[{\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///b28fe4f6-a3a1-4e3d-9306-f508ef6062a5\"}],\"ramUsage\":2.45,\"server\":\"zer0\",\"moduleSequenceNumber\":209}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack all close servers & SPREAD both money maker & same script\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0 || host === 'home') {\\n\\t\\tns.tprint(`ERROR ${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`Running ${moneyMaker} with ${threads} `)\\n\\tns.spawn(moneyMaker, threads)\\n}\",\"filename\":\"hackSpreadServers.ns\",\"url\":\"blob:file:///bc8ef833-7c58-4711-a491-1162d14d5e95\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackSpreadServers.ns\",\"url\":\"blob:file:///bc8ef833-7c58-4711-a491-1162d14d5e95\"}],\"ramUsage\":5.15,\"server\":\"zer0\",\"moduleSequenceNumber\":106}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//lighter version, still infect but try and save RAM\\n// REQUIRES RUNNING moneyMaker MANUALLY\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\tns.tprintf(`WARN: Also run moneyMaker manually.`);\\n}\",\"filename\":\"hackSpreadServers-LIGHT.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"zer0\",\"moduleSequenceNumber\":107}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack server, SPREAD itself & run moneymaker as max as possible\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}] Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]--${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t\\t//proceed to execute virus in remote pc\\n\\t\\tif (ns.exec(spreadVirus, target, 1, host))\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--*${spreadVirus} spreading itself.`)\\n\\t\\telse {\\n\\t\\t\\t//try to run lighter version\\n\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}] ${spreadVirus} couldn't spread itself maybe low ram?.`)\\n\\t\\t\\tif (ns.exec(lightVirus, target)) {\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]${lightVirus} was ran instead.`)\\n\\t\\t\\t\\t//now try to run moneyMaker\\n\\t\\t\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t\\t\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\t\\t\\t\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\t\\t\\t\\tif (threads === 0) {\\n\\t\\t\\t\\t\\tns.tprint(`ERROR[${host}]>>>[${target}]${moneyMaker} can't be run in this server: ${target}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]threads\\t\\t-\\t${threads}`)\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\twhile (ns.isRunning(lightVirus, target))\\n\\t\\t\\t\\t\\tawait ns.sleep(3000) //give time for lightVirus to spread and then run\\n\\t\\t\\t\\tif (ns.exec(moneyMaker, target, threads))\\n\\t\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${moneyMaker} was ran successfully .`)\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]${moneyMaker} wasn't run on target. How?`)\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] even ${lightVirus} couldn't be run, virus wasn't spread from here.`)\\n\\t\\t}\\n\\t}//)\\n\\tif (host === 'home') return\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0) {\\n\\t\\tns.tprint(`ERROR[${host}]${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR[${host}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR[${host}]threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`INFO[${host}]Running ${moneyMaker} with ${threads} threads`)\\n\\t//ns.exec(moneyMaker, host, threads)\\n\\tns.spawn(moneyMaker, threads);\\n}\",\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///5b98c33d-4583-404a-b650-0c452cffff12\",\"module\":{},\"dependencies\":[{\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///5b98c33d-4583-404a-b650-0c452cffff12\"}],\"ramUsage\":6.55,\"server\":\"zer0\",\"moduleSequenceNumber\":153}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//Lighter version, DOESN'T EXECUTE ANYTHING, so it is basically the last branch in execution\\n\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO LIGHT[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`LIGHT[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR LIGHT[${host}]>>>[${target}]Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN LIGHT[${host}]>>>[${target}] with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n}\",\"filename\":\"LIGHT-selfSpread.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"zer0\",\"moduleSequenceNumber\":109}}],\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":25,\"hackDifficulty\":9.48399999999998,\"minDifficulty\":8,\"moneyAvailable\":14761601.562903592,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-751568.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[6],[6,7],[4,6,9],[1,3,9,2],[5,5,4,3,8],[2,6,9,1,8,8],[1,1,2,3,6,7,8],[5,8,4,9,5,7,5,4],[1,6,7,2,9,1,3,5,2],[6,8,3,5,5,4,9,4,2,4],[1,5,6,1,1,1,8,4,4,5,1]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"47.1.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//ready to be run script to get Money and handle gains/security\\nexport async function main(ns) {\\n\\tconst target = ns.args[0] || ns.getHostname();\\n\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.8;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target)\\n\\t}\\n}\",\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///c8f0736f-4e9e-41ed-8a23-2d49b5591a79\",\"module\":\"\",\"dependencies\":[{\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///c8f0736f-4e9e-41ed-8a23-2d49b5591a79\"}],\"ramUsage\":2.45,\"server\":\"nectar-net\",\"moduleSequenceNumber\":110}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack all close servers & SPREAD both money maker & same script\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0 || host === 'home') {\\n\\t\\tns.tprint(`ERROR ${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`Running ${moneyMaker} with ${threads} `)\\n\\tns.spawn(moneyMaker, threads)\\n}\",\"filename\":\"hackSpreadServers.ns\",\"url\":\"blob:file:///83e99d0d-160e-4a59-b275-aef6e16438d2\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackSpreadServers.ns\",\"url\":\"blob:file:///83e99d0d-160e-4a59-b275-aef6e16438d2\"}],\"ramUsage\":5.15,\"server\":\"nectar-net\",\"moduleSequenceNumber\":111}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//lighter version, still infect but try and save RAM\\n// REQUIRES RUNNING moneyMaker MANUALLY\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\tns.tprintf(`WARN: Also run moneyMaker manually.`);\\n}\",\"filename\":\"hackSpreadServers-LIGHT.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"nectar-net\",\"moduleSequenceNumber\":112}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack server, SPREAD itself & run moneymaker as max as possible\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}] Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]--${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t\\t//proceed to execute virus in remote pc\\n\\t\\tif (ns.exec(spreadVirus, target, 1, host))\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--*${spreadVirus} spreading itself.`)\\n\\t\\telse {\\n\\t\\t\\t//try to run lighter version\\n\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}] ${spreadVirus} couldn't spread itself maybe low ram?.`)\\n\\t\\t\\tif (ns.exec(lightVirus, target)) {\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]${lightVirus} was ran instead.`)\\n\\t\\t\\t\\t//now try to run moneyMaker\\n\\t\\t\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t\\t\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\t\\t\\t\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\t\\t\\t\\tif (threads === 0) {\\n\\t\\t\\t\\t\\tns.tprint(`ERROR[${host}]>>>[${target}]${moneyMaker} can't be run in this server: ${target}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]threads\\t\\t-\\t${threads}`)\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\twhile (ns.isRunning(lightVirus, target))\\n\\t\\t\\t\\t\\tawait ns.sleep(3000) //give time for lightVirus to spread and then run\\n\\t\\t\\t\\tif (ns.exec(moneyMaker, target, threads))\\n\\t\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${moneyMaker} was ran successfully .`)\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]${moneyMaker} wasn't run on target. How?`)\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] even ${lightVirus} couldn't be run, virus wasn't spread from here.`)\\n\\t\\t}\\n\\t}//)\\n\\tif (host === 'home') return\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0) {\\n\\t\\tns.tprint(`ERROR[${host}]${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR[${host}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR[${host}]threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`INFO[${host}]Running ${moneyMaker} with ${threads} threads`)\\n\\t//ns.exec(moneyMaker, host, threads)\\n\\tns.spawn(moneyMaker, threads);\\n}\",\"filename\":\"selfSpread.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.55,\"server\":\"nectar-net\",\"moduleSequenceNumber\":113}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//Lighter version, DOESN'T EXECUTE ANYTHING, so it is basically the last branch in execution\\n\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO LIGHT[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`LIGHT[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR LIGHT[${host}]>>>[${target}]Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN LIGHT[${host}]>>>[${target}] with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n}\",\"filename\":\"LIGHT-selfSpread.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"nectar-net\",\"moduleSequenceNumber\":114}}],\"serversOnNetwork\":[\"n00dles\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.984000000000001,\"minDifficulty\":7,\"moneyAvailable\":3409466.4248769484,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"63.9.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//ready to be run script to get Money and handle gains/security\\nexport async function main(ns) {\\n\\tconst target = ns.args[0] || ns.getHostname();\\n\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.8;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target)\\n\\t}\\n}\",\"filename\":\"moneyMaker.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"neo-net\",\"moduleSequenceNumber\":115}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack all close servers & SPREAD both money maker & same script\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0 || host === 'home') {\\n\\t\\tns.tprint(`ERROR ${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`Running ${moneyMaker} with ${threads} `)\\n\\tns.spawn(moneyMaker, threads)\\n}\",\"filename\":\"hackSpreadServers.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.15,\"server\":\"neo-net\",\"moduleSequenceNumber\":116}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//lighter version, still infect but try and save RAM\\n// REQUIRES RUNNING moneyMaker MANUALLY\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\tns.tprintf(`WARN: Also run moneyMaker manually.`);\\n}\",\"filename\":\"hackSpreadServers-LIGHT.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"neo-net\",\"moduleSequenceNumber\":117}}],\"serversOnNetwork\":[\"nectar-net\",\"comptek\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-312182.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[6,[158,143,11,21,185,11,70,32,170,116,2]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"58.1.8.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":63.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"moneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1086.6100000001102,\"pid\":26,\"ramUsage\":2.45,\"server\":\"silver-helix\",\"threads\":26}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//ready to be run script to get Money and handle gains/security\\nexport async function main(ns) {\\n\\tconst target = ns.args[0] || ns.getHostname();\\n\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.8;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target)\\n\\t}\\n}\",\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///10abc7e8-1cac-47f4-b3d0-03b091cd8dbb\",\"module\":{},\"dependencies\":[{\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///10abc7e8-1cac-47f4-b3d0-03b091cd8dbb\"}],\"ramUsage\":2.45,\"server\":\"silver-helix\",\"moduleSequenceNumber\":212}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack server, SPREAD itself & run moneymaker as max as possible\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}] Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]--${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t\\t//proceed to execute virus in remote pc\\n\\t\\tif (ns.exec(spreadVirus, target, 1, host))\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--*${spreadVirus} spreading itself.`)\\n\\t\\telse {\\n\\t\\t\\t//try to run lighter version\\n\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}] ${spreadVirus} couldn't spread itself maybe low ram?.`)\\n\\t\\t\\tif (ns.exec(lightVirus, target)) {\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]${lightVirus} was ran instead.`)\\n\\t\\t\\t\\t//now try to run moneyMaker\\n\\t\\t\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t\\t\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\t\\t\\t\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\t\\t\\t\\tif (threads === 0) {\\n\\t\\t\\t\\t\\tns.tprint(`ERROR[${host}]>>>[${target}]${moneyMaker} can't be run in this server: ${target}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]threads\\t\\t-\\t${threads}`)\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\twhile (ns.isRunning(lightVirus, target))\\n\\t\\t\\t\\t\\tawait ns.sleep(3000) //give time for lightVirus to spread and then run\\n\\t\\t\\t\\tif (ns.exec(moneyMaker, target, threads))\\n\\t\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${moneyMaker} was ran successfully .`)\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]${moneyMaker} wasn't run on target. How?`)\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] even ${lightVirus} couldn't be run, virus wasn't spread from here.`)\\n\\t\\t}\\n\\t}//)\\n\\tif (host === 'home') return\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0) {\\n\\t\\tns.tprint(`ERROR[${host}]${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR[${host}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR[${host}]threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`INFO[${host}]Running ${moneyMaker} with ${threads} threads`)\\n\\t//ns.exec(moneyMaker, host, threads)\\n\\tns.spawn(moneyMaker, threads);\\n}\",\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///6ab4b65f-0568-4a97-a64f-be443bc308ce\",\"module\":{},\"dependencies\":[{\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///6ab4b65f-0568-4a97-a64f-be443bc308ce\"}],\"ramUsage\":6.55,\"server\":\"silver-helix\",\"moduleSequenceNumber\":163}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//Lighter version, DOESN'T EXECUTE ANYTHING, so it is basically the last branch in execution\\n\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO LIGHT[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`LIGHT[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR LIGHT[${host}]>>>[${target}]Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN LIGHT[${host}]>>>[${target}] with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n}\",\"filename\":\"LIGHT-selfSpread.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"silver-helix\",\"moduleSequenceNumber\":161}}],\"serversOnNetwork\":[\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"68.2.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"hong-fang-tea\":[0,0,78,6]},\"filename\":\"moneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":630,\"onlineMoneyMade\":0,\"onlineRunningTime\":1086.6100000001102,\"pid\":20,\"ramUsage\":2.45,\"server\":\"hong-fang-tea\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//ready to be run script to get Money and handle gains/security\\nexport async function main(ns) {\\n\\tconst target = ns.args[0] || ns.getHostname();\\n\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.8;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target)\\n\\t}\\n}\",\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///d63c4359-4423-444b-941c-768af466a60d\",\"module\":{},\"dependencies\":[{\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///d63c4359-4423-444b-941c-768af466a60d\"}],\"ramUsage\":2.45,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":206}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack all close servers\\n//\\tcopies moneyMaker.ns over the server and tries to run for itself and the server\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackCloseServers.ns';\\n\\tconst files = [moneyMaker, spreadVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprint(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprint(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\t\\t\\t\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0 || host === 'home') {\\n\\t\\tns.tprint(`ERROR MoneyMaker can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR scriptRam:\\t${scriptRam}`)\\n\\t\\tns.tprintf(`ERROR maxRam\\t:\\t${maxRam}`)\\n\\t\\treturn\\n\\t}\\n\\tspawn(moneyMaker, threads)\\n}\",\"filename\":\"hackCloseServers.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.15,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":119}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack all close servers & SPREAD both money maker & same script\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0 || host === 'home') {\\n\\t\\tns.tprint(`ERROR ${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`Running ${moneyMaker} with ${threads} `)\\n\\tns.spawn(moneyMaker, threads)\\n}\",\"filename\":\"hackSpreadServers.ns\",\"url\":\"blob:file:///d362351d-eead-4b8f-8d17-640ec2383c80\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackSpreadServers.ns\",\"url\":\"blob:file:///d362351d-eead-4b8f-8d17-640ec2383c80\"}],\"ramUsage\":5.15,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":120}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//lighter version, still infect but try and save RAM\\n// REQUIRES RUNNING moneyMaker MANUALLY\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\tns.tprintf(`WARN: Also run moneyMaker manually.`);\\n}\",\"filename\":\"hackSpreadServers-LIGHT.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":121}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack server, SPREAD itself & run moneymaker as max as possible\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}] Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]--${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t\\t//proceed to execute virus in remote pc\\n\\t\\tif (ns.exec(spreadVirus, target, 1, host))\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--*${spreadVirus} spreading itself.`)\\n\\t\\telse {\\n\\t\\t\\t//try to run lighter version\\n\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}] ${spreadVirus} couldn't spread itself maybe low ram?.`)\\n\\t\\t\\tif (ns.exec(lightVirus, target)) {\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]${lightVirus} was ran instead.`)\\n\\t\\t\\t\\t//now try to run moneyMaker\\n\\t\\t\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t\\t\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\t\\t\\t\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\t\\t\\t\\tif (threads === 0) {\\n\\t\\t\\t\\t\\tns.tprint(`ERROR[${host}]>>>[${target}]${moneyMaker} can't be run in this server: ${target}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]threads\\t\\t-\\t${threads}`)\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\twhile (ns.isRunning(lightVirus, target))\\n\\t\\t\\t\\t\\tawait ns.sleep(3000) //give time for lightVirus to spread and then run\\n\\t\\t\\t\\tif (ns.exec(moneyMaker, target, threads))\\n\\t\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${moneyMaker} was ran successfully .`)\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]${moneyMaker} wasn't run on target. How?`)\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] even ${lightVirus} couldn't be run, virus wasn't spread from here.`)\\n\\t\\t}\\n\\t}//)\\n\\tif (host === 'home') return\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0) {\\n\\t\\tns.tprint(`ERROR[${host}]${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR[${host}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR[${host}]threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`INFO[${host}]Running ${moneyMaker} with ${threads} threads`)\\n\\t//ns.exec(moneyMaker, host, threads)\\n\\tns.spawn(moneyMaker, threads);\\n}\",\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///ae805f76-b29d-44f8-ae6b-f43f5273bc60\",\"module\":{},\"dependencies\":[{\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///ae805f76-b29d-44f8-ae6b-f43f5273bc60\"}],\"ramUsage\":6.55,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":150}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//Lighter version, DOESN'T EXECUTE ANYTHING, so it is basically the last branch in execution\\n\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO LIGHT[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`LIGHT[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR LIGHT[${host}]>>>[${target}]Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN LIGHT[${host}]>>>[${target}] with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n}\",\"filename\":\"LIGHT-selfSpread.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":123}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":6.776000000000004,\"minDifficulty\":5,\"moneyAvailable\":5604342.501847203,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"98.3.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14.7,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"harakiri-sushi\":[0,0,60,6]},\"filename\":\"moneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":495,\"onlineMoneyMade\":0,\"onlineRunningTime\":1086.6100000001102,\"pid\":21,\"ramUsage\":2.45,\"server\":\"harakiri-sushi\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//ready to be run script to get Money and handle gains/security\\nexport async function main(ns) {\\n\\tconst target = ns.args[0] || ns.getHostname();\\n\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.8;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target)\\n\\t}\\n}\",\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///cae573a6-9257-4c9b-86a4-b4539dc4c217\",\"module\":{},\"dependencies\":[{\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///cae573a6-9257-4c9b-86a4-b4539dc4c217\"}],\"ramUsage\":2.45,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":207}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack all close servers\\n//\\tcopies moneyMaker.ns over the server and tries to run for itself and the server\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackCloseServers.ns';\\n\\tconst files = [moneyMaker, spreadVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprint(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprint(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\t\\t\\t\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0 || host === 'home') {\\n\\t\\tns.tprint(`ERROR MoneyMaker can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR scriptRam:\\t${scriptRam}`)\\n\\t\\tns.tprintf(`ERROR maxRam\\t:\\t${maxRam}`)\\n\\t\\treturn\\n\\t}\\n\\tspawn(moneyMaker, threads)\\n}\",\"filename\":\"hackCloseServers.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.15,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":125}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack all close servers & SPREAD both money maker & same script\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0 || host === 'home') {\\n\\t\\tns.tprint(`ERROR ${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`Running ${moneyMaker} with ${threads} `)\\n\\tns.spawn(moneyMaker, threads)\\n}\",\"filename\":\"hackSpreadServers.ns\",\"url\":\"blob:file:///ff6f3b1e-85a1-4b6d-ba11-bc47ef67f397\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackSpreadServers.ns\",\"url\":\"blob:file:///ff6f3b1e-85a1-4b6d-ba11-bc47ef67f397\"}],\"ramUsage\":5.15,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":126}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//lighter version, still infect but try and save RAM\\n// REQUIRES RUNNING moneyMaker MANUALLY\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\tns.tprintf(`WARN: Also run moneyMaker manually.`);\\n}\",\"filename\":\"hackSpreadServers-LIGHT.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":127}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack server, SPREAD itself & run moneymaker as max as possible\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}] Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]--${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t\\t//proceed to execute virus in remote pc\\n\\t\\tif (ns.exec(spreadVirus, target, 1, host))\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--*${spreadVirus} spreading itself.`)\\n\\t\\telse {\\n\\t\\t\\t//try to run lighter version\\n\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}] ${spreadVirus} couldn't spread itself maybe low ram?.`)\\n\\t\\t\\tif (ns.exec(lightVirus, target)) {\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]${lightVirus} was ran instead.`)\\n\\t\\t\\t\\t//now try to run moneyMaker\\n\\t\\t\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t\\t\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\t\\t\\t\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\t\\t\\t\\tif (threads === 0) {\\n\\t\\t\\t\\t\\tns.tprint(`ERROR[${host}]>>>[${target}]${moneyMaker} can't be run in this server: ${target}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]threads\\t\\t-\\t${threads}`)\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\twhile (ns.isRunning(lightVirus, target))\\n\\t\\t\\t\\t\\tawait ns.sleep(3000) //give time for lightVirus to spread and then run\\n\\t\\t\\t\\tif (ns.exec(moneyMaker, target, threads))\\n\\t\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${moneyMaker} was ran successfully .`)\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]${moneyMaker} wasn't run on target. How?`)\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] even ${lightVirus} couldn't be run, virus wasn't spread from here.`)\\n\\t\\t}\\n\\t}//)\\n\\tif (host === 'home') return\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0) {\\n\\t\\tns.tprint(`ERROR[${host}]${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR[${host}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR[${host}]threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`INFO[${host}]Running ${moneyMaker} with ${threads} threads`)\\n\\t//ns.exec(moneyMaker, host, threads)\\n\\tns.spawn(moneyMaker, threads);\\n}\",\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///5ab48694-7842-4db3-93b4-b2f9981392bc\",\"module\":{},\"dependencies\":[{\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///5ab48694-7842-4db3-93b4-b2f9981392bc\"}],\"ramUsage\":6.55,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":151}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//Lighter version, DOESN'T EXECUTE ANYTHING, so it is basically the last branch in execution\\n\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO LIGHT[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`LIGHT[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR LIGHT[${host}]>>>[${target}]Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN LIGHT[${host}]>>>[${target}] with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n}\",\"filename\":\"LIGHT-selfSpread.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":129}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":15,\"hackDifficulty\":6.9200000000000035,\"minDifficulty\":5,\"moneyAvailable\":11899626.887046233,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"29.3.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"phantasy\":[0,0,0,26]},\"filename\":\"moneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":234,\"onlineMoneyMade\":0,\"onlineRunningTime\":1086.4100000001101,\"pid\":28,\"ramUsage\":2.45,\"server\":\"phantasy\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//ready to be run script to get Money and handle gains/security\\nexport async function main(ns) {\\n\\tconst target = ns.args[0] || ns.getHostname();\\n\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.8;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target)\\n\\t}\\n}\",\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///5c51413e-441c-4bc7-9c60-ae309a71d975\",\"module\":{},\"dependencies\":[{\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///5c51413e-441c-4bc7-9c60-ae309a71d975\"}],\"ramUsage\":2.45,\"server\":\"phantasy\",\"moduleSequenceNumber\":214}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack server, SPREAD itself & run moneymaker as max as possible\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}] Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]--${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t\\t//proceed to execute virus in remote pc\\n\\t\\tif (ns.exec(spreadVirus, target, 1, host))\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--*${spreadVirus} spreading itself.`)\\n\\t\\telse {\\n\\t\\t\\t//try to run lighter version\\n\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}] ${spreadVirus} couldn't spread itself maybe low ram?.`)\\n\\t\\t\\tif (ns.exec(lightVirus, target)) {\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]${lightVirus} was ran instead.`)\\n\\t\\t\\t\\t//now try to run moneyMaker\\n\\t\\t\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t\\t\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\t\\t\\t\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\t\\t\\t\\tif (threads === 0) {\\n\\t\\t\\t\\t\\tns.tprint(`ERROR[${host}]>>>[${target}]${moneyMaker} can't be run in this server: ${target}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]threads\\t\\t-\\t${threads}`)\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\twhile (ns.isRunning(lightVirus, target))\\n\\t\\t\\t\\t\\tawait ns.sleep(3000) //give time for lightVirus to spread and then run\\n\\t\\t\\t\\tif (ns.exec(moneyMaker, target, threads))\\n\\t\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${moneyMaker} was ran successfully .`)\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]${moneyMaker} wasn't run on target. How?`)\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] even ${lightVirus} couldn't be run, virus wasn't spread from here.`)\\n\\t\\t}\\n\\t}//)\\n\\tif (host === 'home') return\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0) {\\n\\t\\tns.tprint(`ERROR[${host}]${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR[${host}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR[${host}]threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`INFO[${host}]Running ${moneyMaker} with ${threads} threads`)\\n\\t//ns.exec(moneyMaker, host, threads)\\n\\tns.spawn(moneyMaker, threads);\\n}\",\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///56c98238-78fa-422d-a12c-d1f4008bf470\",\"module\":{},\"dependencies\":[{\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///56c98238-78fa-422d-a12c-d1f4008bf470\"}],\"ramUsage\":6.55,\"server\":\"phantasy\",\"moduleSequenceNumber\":176}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//Lighter version, DOESN'T EXECUTE ANYTHING, so it is basically the last branch in execution\\n\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO LIGHT[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`LIGHT[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR LIGHT[${host}]>>>[${target}]Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN LIGHT[${host}]>>>[${target}] with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n}\",\"filename\":\"LIGHT-selfSpread.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"phantasy\",\"moduleSequenceNumber\":175}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":18.700000000000003,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"47.9.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"max-hardware\":[0,0,78,13]},\"filename\":\"moneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":682.5,\"onlineMoneyMade\":0,\"onlineRunningTime\":1086.6100000001102,\"pid\":24,\"ramUsage\":2.45,\"server\":\"max-hardware\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//ready to be run script to get Money and handle gains/security\\nexport async function main(ns) {\\n\\tconst target = ns.args[0] || ns.getHostname();\\n\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.8;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target)\\n\\t}\\n}\",\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///4da0cc0b-71af-4e7e-b172-ebe73566261b\",\"module\":{},\"dependencies\":[{\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///4da0cc0b-71af-4e7e-b172-ebe73566261b\"}],\"ramUsage\":2.45,\"server\":\"max-hardware\",\"moduleSequenceNumber\":210}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack all close servers & SPREAD both money maker & same script\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0 || host === 'home') {\\n\\t\\tns.tprint(`ERROR ${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`Running ${moneyMaker} with ${threads} `)\\n\\tns.spawn(moneyMaker, threads)\\n}\",\"filename\":\"hackSpreadServers.ns\",\"url\":\"blob:file:///4fab53f2-2e81-4d37-8d59-ff682e7f3305\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackSpreadServers.ns\",\"url\":\"blob:file:///4fab53f2-2e81-4d37-8d59-ff682e7f3305\"}],\"ramUsage\":5.15,\"server\":\"max-hardware\",\"moduleSequenceNumber\":131}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//lighter version, still infect but try and save RAM\\n// REQUIRES RUNNING moneyMaker MANUALLY\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\tns.tprintf(`WARN: Also run moneyMaker manually.`);\\n}\",\"filename\":\"hackSpreadServers-LIGHT.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"max-hardware\",\"moduleSequenceNumber\":132}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack server, SPREAD itself & run moneymaker as max as possible\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}] Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]--${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t\\t//proceed to execute virus in remote pc\\n\\t\\tif (ns.exec(spreadVirus, target, 1, host))\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--*${spreadVirus} spreading itself.`)\\n\\t\\telse {\\n\\t\\t\\t//try to run lighter version\\n\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}] ${spreadVirus} couldn't spread itself maybe low ram?.`)\\n\\t\\t\\tif (ns.exec(lightVirus, target)) {\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]${lightVirus} was ran instead.`)\\n\\t\\t\\t\\t//now try to run moneyMaker\\n\\t\\t\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t\\t\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\t\\t\\t\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\t\\t\\t\\tif (threads === 0) {\\n\\t\\t\\t\\t\\tns.tprint(`ERROR[${host}]>>>[${target}]${moneyMaker} can't be run in this server: ${target}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]threads\\t\\t-\\t${threads}`)\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\twhile (ns.isRunning(lightVirus, target))\\n\\t\\t\\t\\t\\tawait ns.sleep(3000) //give time for lightVirus to spread and then run\\n\\t\\t\\t\\tif (ns.exec(moneyMaker, target, threads))\\n\\t\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${moneyMaker} was ran successfully .`)\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]${moneyMaker} wasn't run on target. How?`)\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] even ${lightVirus} couldn't be run, virus wasn't spread from here.`)\\n\\t\\t}\\n\\t}//)\\n\\tif (host === 'home') return\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0) {\\n\\t\\tns.tprint(`ERROR[${host}]${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR[${host}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR[${host}]threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`INFO[${host}]Running ${moneyMaker} with ${threads} threads`)\\n\\t//ns.exec(moneyMaker, host, threads)\\n\\tns.spawn(moneyMaker, threads);\\n}\",\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///c3e8149c-b61e-484f-ad59-f971dfd3c011\",\"module\":{},\"dependencies\":[{\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///c3e8149c-b61e-484f-ad59-f971dfd3c011\"}],\"ramUsage\":6.55,\"server\":\"max-hardware\",\"moduleSequenceNumber\":154}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//Lighter version, DOESN'T EXECUTE ANYTHING, so it is basically the last branch in execution\\n\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO LIGHT[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`LIGHT[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR LIGHT[${host}]>>>[${target}]Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN LIGHT[${host}]>>>[${target}] with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n}\",\"filename\":\"LIGHT-selfSpread.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"max-hardware\",\"moduleSequenceNumber\":134}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":6.559999999999967,\"minDifficulty\":5,\"moneyAvailable\":29747416.913616773,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"46.9.9.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"moneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1086.6100000001102,\"pid\":27,\"ramUsage\":2.45,\"server\":\"omega-net\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//ready to be run script to get Money and handle gains/security\\nexport async function main(ns) {\\n\\tconst target = ns.args[0] || ns.getHostname();\\n\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.8;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target)\\n\\t}\\n}\",\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///9ae7d339-3881-4aa4-bcd7-4c6af219ee0d\",\"module\":{},\"dependencies\":[{\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///9ae7d339-3881-4aa4-bcd7-4c6af219ee0d\"}],\"ramUsage\":2.45,\"server\":\"omega-net\",\"moduleSequenceNumber\":213}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack server, SPREAD itself & run moneymaker as max as possible\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}] Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]--${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t\\t//proceed to execute virus in remote pc\\n\\t\\tif (ns.exec(spreadVirus, target, 1, host))\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--*${spreadVirus} spreading itself.`)\\n\\t\\telse {\\n\\t\\t\\t//try to run lighter version\\n\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}] ${spreadVirus} couldn't spread itself maybe low ram?.`)\\n\\t\\t\\tif (ns.exec(lightVirus, target)) {\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]${lightVirus} was ran instead.`)\\n\\t\\t\\t\\t//now try to run moneyMaker\\n\\t\\t\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t\\t\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\t\\t\\t\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\t\\t\\t\\tif (threads === 0) {\\n\\t\\t\\t\\t\\tns.tprint(`ERROR[${host}]>>>[${target}]${moneyMaker} can't be run in this server: ${target}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]threads\\t\\t-\\t${threads}`)\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\twhile (ns.isRunning(lightVirus, target))\\n\\t\\t\\t\\t\\tawait ns.sleep(3000) //give time for lightVirus to spread and then run\\n\\t\\t\\t\\tif (ns.exec(moneyMaker, target, threads))\\n\\t\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${moneyMaker} was ran successfully .`)\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]${moneyMaker} wasn't run on target. How?`)\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] even ${lightVirus} couldn't be run, virus wasn't spread from here.`)\\n\\t\\t}\\n\\t}//)\\n\\tif (host === 'home') return\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0) {\\n\\t\\tns.tprint(`ERROR[${host}]${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR[${host}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR[${host}]threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`INFO[${host}]Running ${moneyMaker} with ${threads} threads`)\\n\\t//ns.exec(moneyMaker, host, threads)\\n\\tns.spawn(moneyMaker, threads);\\n}\",\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///059906e1-ebeb-4c7a-967d-763d15e71110\",\"module\":{},\"dependencies\":[{\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///059906e1-ebeb-4c7a-967d-763d15e71110\"}],\"ramUsage\":6.55,\"server\":\"omega-net\",\"moduleSequenceNumber\":169}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//Lighter version, DOESN'T EXECUTE ANYTHING, so it is basically the last branch in execution\\n\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO LIGHT[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`LIGHT[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR LIGHT[${host}]>>>[${target}]Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN LIGHT[${host}]>>>[${target}] with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n}\",\"filename\":\"LIGHT-selfSpread.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"omega-net\",\"moduleSequenceNumber\":168}}],\"serversOnNetwork\":[\"max-hardware\",\"johnson-ortho\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":68823717,\"moneyMax\":1720592925,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":198,\"serverGrowth\":31}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"29.2.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//ready to be run script to get Money and handle gains/security\\nexport async function main(ns) {\\n\\tconst target = ns.args[0] || ns.getHostname();\\n\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.8;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target)\\n\\t}\\n}\",\"filename\":\"moneyMaker.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.45,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":184}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack server, SPREAD itself & run moneymaker as max as possible\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}] Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]--${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t\\t//proceed to execute virus in remote pc\\n\\t\\tif (ns.exec(spreadVirus, target, 1, host))\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--*${spreadVirus} spreading itself.`)\\n\\t\\telse {\\n\\t\\t\\t//try to run lighter version\\n\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}] ${spreadVirus} couldn't spread itself maybe low ram?.`)\\n\\t\\t\\tif (ns.exec(lightVirus, target)) {\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]${lightVirus} was ran instead.`)\\n\\t\\t\\t\\t//now try to run moneyMaker\\n\\t\\t\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t\\t\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\t\\t\\t\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\t\\t\\t\\tif (threads === 0) {\\n\\t\\t\\t\\t\\tns.tprint(`ERROR[${host}]>>>[${target}]${moneyMaker} can't be run in this server: ${target}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]threads\\t\\t-\\t${threads}`)\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\twhile (ns.isRunning(lightVirus, target))\\n\\t\\t\\t\\t\\tawait ns.sleep(3000) //give time for lightVirus to spread and then run\\n\\t\\t\\t\\tif (ns.exec(moneyMaker, target, threads))\\n\\t\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${moneyMaker} was ran successfully .`)\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]${moneyMaker} wasn't run on target. How?`)\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] even ${lightVirus} couldn't be run, virus wasn't spread from here.`)\\n\\t\\t}\\n\\t}//)\\n\\tif (host === 'home') return\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0) {\\n\\t\\tns.tprint(`ERROR[${host}]${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR[${host}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR[${host}]threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`INFO[${host}]Running ${moneyMaker} with ${threads} threads`)\\n\\t//ns.exec(moneyMaker, host, threads)\\n\\tns.spawn(moneyMaker, threads);\\n}\",\"filename\":\"selfSpread.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.55,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":186}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//Lighter version, DOESN'T EXECUTE ANYTHING, so it is basically the last branch in execution\\n\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO LIGHT[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`LIGHT[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR LIGHT[${host}]>>>[${target}]Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN LIGHT[${host}]>>>[${target}] with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n}\",\"filename\":\"LIGHT-selfSpread.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":188}}],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":39,\"hackDifficulty\":39,\"minDifficulty\":13,\"moneyAvailable\":50423872,\"moneyMax\":1260596800,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":252,\"serverGrowth\":33}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"47.7.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.85,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[0,0,0,39]},\"filename\":\"moneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":468,\"onlineMoneyMade\":0,\"onlineRunningTime\":1086.6100000001102,\"pid\":22,\"ramUsage\":2.45,\"server\":\"iron-gym\",\"threads\":13}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//ready to be run script to get Money and handle gains/security\\nexport async function main(ns) {\\n\\tconst target = ns.args[0] || ns.getHostname();\\n\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.8;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target)\\n\\t}\\n}\",\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///8de9bf1d-dbe5-44c4-877d-543ad4786b25\",\"module\":{},\"dependencies\":[{\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///8de9bf1d-dbe5-44c4-877d-543ad4786b25\"}],\"ramUsage\":2.45,\"server\":\"iron-gym\",\"moduleSequenceNumber\":208}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack all close servers & SPREAD both money maker & same script\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0 || host === 'home') {\\n\\t\\tns.tprint(`ERROR ${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`Running ${moneyMaker} with ${threads} `)\\n\\tns.spawn(moneyMaker, threads)\\n}\",\"filename\":\"hackSpreadServers.ns\",\"url\":\"blob:file:///d0e8dfb6-3723-4994-a8ee-311bdadfb80d\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackSpreadServers.ns\",\"url\":\"blob:file:///d0e8dfb6-3723-4994-a8ee-311bdadfb80d\"}],\"ramUsage\":5.15,\"server\":\"iron-gym\",\"moduleSequenceNumber\":136}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//lighter version, still infect but try and save RAM\\n// REQUIRES RUNNING moneyMaker MANUALLY\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\tns.tprintf(`WARN: Also run moneyMaker manually.`);\\n}\",\"filename\":\"hackSpreadServers-LIGHT.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"iron-gym\",\"moduleSequenceNumber\":137}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack server, SPREAD itself & run moneymaker as max as possible\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}] Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]--${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t\\t//proceed to execute virus in remote pc\\n\\t\\tif (ns.exec(spreadVirus, target, 1, host))\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--*${spreadVirus} spreading itself.`)\\n\\t\\telse {\\n\\t\\t\\t//try to run lighter version\\n\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}] ${spreadVirus} couldn't spread itself maybe low ram?.`)\\n\\t\\t\\tif (ns.exec(lightVirus, target)) {\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]${lightVirus} was ran instead.`)\\n\\t\\t\\t\\t//now try to run moneyMaker\\n\\t\\t\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t\\t\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\t\\t\\t\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\t\\t\\t\\tif (threads === 0) {\\n\\t\\t\\t\\t\\tns.tprint(`ERROR[${host}]>>>[${target}]${moneyMaker} can't be run in this server: ${target}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]threads\\t\\t-\\t${threads}`)\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\twhile (ns.isRunning(lightVirus, target))\\n\\t\\t\\t\\t\\tawait ns.sleep(3000) //give time for lightVirus to spread and then run\\n\\t\\t\\t\\tif (ns.exec(moneyMaker, target, threads))\\n\\t\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${moneyMaker} was ran successfully .`)\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]${moneyMaker} wasn't run on target. How?`)\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] even ${lightVirus} couldn't be run, virus wasn't spread from here.`)\\n\\t\\t}\\n\\t}//)\\n\\tif (host === 'home') return\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0) {\\n\\t\\tns.tprint(`ERROR[${host}]${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR[${host}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR[${host}]threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`INFO[${host}]Running ${moneyMaker} with ${threads} threads`)\\n\\t//ns.exec(moneyMaker, host, threads)\\n\\tns.spawn(moneyMaker, threads);\\n}\",\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///9650185d-872b-4477-8efe-935fdb990685\",\"module\":{},\"dependencies\":[{\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///9650185d-872b-4477-8efe-935fdb990685\"}],\"ramUsage\":6.55,\"server\":\"iron-gym\",\"moduleSequenceNumber\":152}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//Lighter version, DOESN'T EXECUTE ANYTHING, so it is basically the last branch in execution\\n\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO LIGHT[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`LIGHT[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR LIGHT[${host}]>>>[${target}]Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN LIGHT[${host}]>>>[${target}] with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n}\",\"filename\":\"LIGHT-selfSpread.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"iron-gym\",\"moduleSequenceNumber\":139}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":11.850000000000021,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"57.8.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":508,\"serverGrowth\":28}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"11.8.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1092,\"serverGrowth\":54}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"67.9.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":716,\"serverGrowth\":46}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"57.5.5.8\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":508,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-856879.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()()a()\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"25.5.8.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":362,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"41.5.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//ready to be run script to get Money and handle gains/security\\nexport async function main(ns) {\\n\\tconst target = ns.args[0] || ns.getHostname();\\n\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.8;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target)\\n\\t}\\n}\",\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///9d6e5f08-1ce3-42f0-a2b1-357a2cdf126a\",\"module\":{},\"dependencies\":[{\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///9d6e5f08-1ce3-42f0-a2b1-357a2cdf126a\"}],\"ramUsage\":2.45,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":215}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack server, SPREAD itself & run moneymaker as max as possible\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}] Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]--${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t\\t//proceed to execute virus in remote pc\\n\\t\\tif (ns.exec(spreadVirus, target, 1, host))\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--*${spreadVirus} spreading itself.`)\\n\\t\\telse {\\n\\t\\t\\t//try to run lighter version\\n\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}] ${spreadVirus} couldn't spread itself maybe low ram?.`)\\n\\t\\t\\tif (ns.exec(lightVirus, target)) {\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]${lightVirus} was ran instead.`)\\n\\t\\t\\t\\t//now try to run moneyMaker\\n\\t\\t\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t\\t\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\t\\t\\t\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\t\\t\\t\\tif (threads === 0) {\\n\\t\\t\\t\\t\\tns.tprint(`ERROR[${host}]>>>[${target}]${moneyMaker} can't be run in this server: ${target}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]threads\\t\\t-\\t${threads}`)\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\twhile (ns.isRunning(lightVirus, target))\\n\\t\\t\\t\\t\\tawait ns.sleep(3000) //give time for lightVirus to spread and then run\\n\\t\\t\\t\\tif (ns.exec(moneyMaker, target, threads))\\n\\t\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${moneyMaker} was ran successfully .`)\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]${moneyMaker} wasn't run on target. How?`)\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] even ${lightVirus} couldn't be run, virus wasn't spread from here.`)\\n\\t\\t}\\n\\t}//)\\n\\tif (host === 'home') return\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0) {\\n\\t\\tns.tprint(`ERROR[${host}]${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR[${host}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR[${host}]threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`INFO[${host}]Running ${moneyMaker} with ${threads} threads`)\\n\\t//ns.exec(moneyMaker, host, threads)\\n\\tns.spawn(moneyMaker, threads);\\n}\",\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///85fa8633-d802-4cd6-b575-101869ca9b8b\",\"module\":{},\"dependencies\":[{\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///85fa8633-d802-4cd6-b575-101869ca9b8b\"}],\"ramUsage\":6.55,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":195}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//Lighter version, DOESN'T EXECUTE ANYTHING, so it is basically the last branch in execution\\n\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO LIGHT[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`LIGHT[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR LIGHT[${host}]>>>[${target}]Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN LIGHT[${host}]>>>[${target}] with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n}\",\"filename\":\"LIGHT-selfSpread.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":194}}],\"serversOnNetwork\":[\"omega-net\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":213,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"89.5.6.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":547,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"34.8.9.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"CSEC\":[0,111,0,3]},\"filename\":\"moneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":114.75,\"onlineMoneyMade\":0,\"onlineRunningTime\":1086.6100000001102,\"pid\":25,\"ramUsage\":2.45,\"server\":\"CSEC\",\"threads\":3}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//ready to be run script to get Money and handle gains/security\\nexport async function main(ns) {\\n\\tconst target = ns.args[0] || ns.getHostname();\\n\\n\\tvar moneyThresh = ns.getServerMaxMoney(target) * 0.8;\\n\\tvar securityThresh = ns.getServerMinSecurityLevel(target) + 2;\\n\\twhile (true) {\\n\\t\\tif (ns.getServerSecurityLevel(target) > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (ns.getServerMoneyAvailable(target) < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target)\\n\\t}\\n}\",\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///863c3488-fdaa-4879-a70b-f68c20a74d7a\",\"module\":{},\"dependencies\":[{\"filename\":\"moneyMaker.ns\",\"url\":\"blob:file:///863c3488-fdaa-4879-a70b-f68c20a74d7a\"}],\"ramUsage\":2.45,\"server\":\"CSEC\",\"moduleSequenceNumber\":211}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack all close servers & SPREAD both money maker & same script\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0 || host === 'home') {\\n\\t\\tns.tprint(`ERROR ${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`Running ${moneyMaker} with ${threads} `)\\n\\tns.spawn(moneyMaker, threads)\\n}\",\"filename\":\"hackSpreadServers.ns\",\"url\":\"blob:file:///8dd9fb06-446b-486e-84f8-73ff3767effa\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackSpreadServers.ns\",\"url\":\"blob:file:///8dd9fb06-446b-486e-84f8-73ff3767effa\"}],\"ramUsage\":5.15,\"server\":\"CSEC\",\"moduleSequenceNumber\":141}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//lighter version, still infect but try and save RAM\\n// REQUIRES RUNNING moneyMaker MANUALLY\\nexport async function main(ns) {\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'hackSpreadServers.ns';\\n\\tconst lightVirus = 'hackSpreadServers-LIGHT.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`Trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR: Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n\\tns.tprintf(`WARN: Also run moneyMaker manually.`);\\n}\",\"filename\":\"hackSpreadServers-LIGHT.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"CSEC\",\"moduleSequenceNumber\":142}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//script automation to hack server, SPREAD itself & run moneymaker as max as possible\\n//\\talso tries to run moneyMaker.ns threaded for itself\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}] Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]--${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t\\t//proceed to execute virus in remote pc\\n\\t\\tif (ns.exec(spreadVirus, target, 1, host))\\n\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--*${spreadVirus} spreading itself.`)\\n\\t\\telse {\\n\\t\\t\\t//try to run lighter version\\n\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}] ${spreadVirus} couldn't spread itself maybe low ram?.`)\\n\\t\\t\\tif (ns.exec(lightVirus, target)) {\\n\\t\\t\\t\\tns.tprintf(`WARN[${host}]>>>[${target}]${lightVirus} was ran instead.`)\\n\\t\\t\\t\\t//now try to run moneyMaker\\n\\t\\t\\t\\tlet maxRam = ns.getServerMaxRam(host);\\n\\t\\t\\t\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\t\\t\\t\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\t\\t\\t\\tif (threads === 0) {\\n\\t\\t\\t\\t\\tns.tprint(`ERROR[${host}]>>>[${target}]${moneyMaker} can't be run in this server: ${target}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]threads\\t\\t-\\t${threads}`)\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\twhile (ns.isRunning(lightVirus, target))\\n\\t\\t\\t\\t\\tawait ns.sleep(3000) //give time for lightVirus to spread and then run\\n\\t\\t\\t\\tif (ns.exec(moneyMaker, target, threads))\\n\\t\\t\\t\\t\\tns.tprintf(`[${host}]>>>[${target}]--${moneyMaker} was ran successfully .`)\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}]${moneyMaker} wasn't run on target. How?`)\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`ERROR[${host}]>>>[${target}] even ${lightVirus} couldn't be run, virus wasn't spread from here.`)\\n\\t\\t}\\n\\t}//)\\n\\tif (host === 'home') return\\n\\t//afterwards calculate how heavy can moneyMaker be run in current server to be left as running script\\n\\tlet maxRam = ns.getServerMaxRam(host);\\n\\tlet scriptRam = ns.getScriptRam(moneyMaker);\\n\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\tif (threads === 0) {\\n\\t\\tns.tprint(`ERROR[${host}]${moneyMaker} can't be run in this server: ${host}`)\\n\\t\\tns.tprintf(`ERROR[${host}]scriptRam/maxRam\\t-\\t${scriptRam}/${maxRam}`)\\n\\t\\tns.tprintf(`ERROR[${host}]threads\\t\\t-\\t${threads}`)\\n\\t\\treturn\\n\\t}\\n\\tns.tprintf(`INFO[${host}]Running ${moneyMaker} with ${threads} threads`)\\n\\t//ns.exec(moneyMaker, host, threads)\\n\\tns.spawn(moneyMaker, threads);\\n}\",\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///4c77e844-9337-48e5-8ab0-5d4a8081b6e6\",\"module\":{},\"dependencies\":[{\"filename\":\"selfSpread.ns\",\"url\":\"blob:file:///4c77e844-9337-48e5-8ab0-5d4a8081b6e6\"}],\"ramUsage\":6.55,\"server\":\"CSEC\",\"moduleSequenceNumber\":155}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//Lighter version, DOESN'T EXECUTE ANYTHING, so it is basically the last branch in execution\\n\\nexport async function main(ns) {\\n\\tconst prev = ns.args[0];\\n\\tconst host = ns.getHostname()\\n\\tconst targets = ns.scan(host);\\n\\tconst moneyMaker = 'moneyMaker.ns';\\n\\tconst spreadVirus = 'selfSpread.ns';\\n\\tconst lightVirus = 'LIGHT-selfSpread.ns';\\n\\tconst files = [moneyMaker, spreadVirus, lightVirus];\\n\\n\\t//for each target hack and copy files to there\\n\\tns.tprintf(`INFO LIGHT[${host}] is trying to hack the following servers: ${targets}`)\\n\\t//targets.forEach(async (target) => { //wont work like this\\n\\tfor (const target of targets) {\\n\\t\\t//check we aren't trying to hack home nor the previous element\\n\\t\\tif (prev === target || target === 'home') {\\n\\t\\t\\tns.tprintf(`LIGHT[${host}] skipping ${target}`)\\n\\t\\t\\tcontinue\\n\\t\\t}\\n\\n\\t\\t//start hacking\\n\\t\\tlet portsOpened = 0;\\n\\t\\tif (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.brutessh(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.ftpcrack(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.relaysmtp(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.httpworm(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tif (ns.fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\n\\t\\t\\tns.sqlinject(target);\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\t\\tif (portsOpened < requiredPorts) {\\n\\t\\t\\tns.tprintf(`ERROR[${host}]Server ${target} needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\t\\tcontinue;\\n\\t\\t}\\n\\t\\tns.nuke(target);\\n\\n\\t\\tif (!ns.hasRootAccess(target)) {\\n\\t\\t\\tns.tprintf(`ERROR LIGHT[${host}]>>>[${target}]Server ${target} couldn't be hacked.`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]*The server ${target} has been successfully hacked.`)\\n\\n\\t\\t//copies scripts from home server to the new target\\n\\t\\tfor (const file of files) {\\n\\t\\t\\tlet ans = await ns.scp(file, \\\"home\\\", target);\\n\\t\\t\\tif (ans)\\n\\t\\t\\t\\tns.tprintf(`LIGHT[${host}]>>>[${target}]${file} was copied successfully.`)\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`WARN LIGHT[${host}]>>>[${target}] with: ${target}. ${file} Couldn't be copied.`)\\n\\t\\t}\\n\\t}//)\\n}\",\"filename\":\"LIGHT-selfSpread.ns\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":3,\"server\":\"CSEC\",\"moduleSequenceNumber\":144}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":2.937999999999935,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":56,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"5.7.2.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"61.9.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"91.5.0.5\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1.247435897435898,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1.0553846153846154,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":16633.540666667624}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":false}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":false}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":20,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":120,\"CodeInstructionRunTime\":20,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":100,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":250,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"}}","VersionSave":"6","AllGangsSave":"","LastExportBonus":"0","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}