{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":844,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":4,\"agility\":3,\"charisma\":4,\"intelligence\":0,\"hacking_chance_mult\":1.3486419574464565,\"hacking_speed_mult\":1.3419064405099494,\"hacking_money_mult\":2.2535262877878175,\"hacking_grow_mult\":1.349578564970546,\"hacking_exp\":190993268.55096117,\"strength_exp\":0.5254542532769013,\"defense_exp\":0.5254542532769013,\"dexterity_exp\":31.19399043675368,\"agility_exp\":31.19399043675368,\"charisma_exp\":39.13305217011597,\"intelligence_exp\":0,\"hacking_mult\":2.0583762483800974,\"strength_mult\":1.2416122797729021,\"defense_mult\":1.0796628519764369,\"dexterity_mult\":1.434062183137702,\"agility_mult\":1.1336459945752586,\"charisma_mult\":1.295595422371724,\"hacking_exp_mult\":2.717504815180453,\"strength_exp_mult\":1.3657735077501927,\"defense_exp_mult\":1.3657735077501927,\"dexterity_exp_mult\":1.3657735077501927,\"agility_exp_mult\":1.3657735077501927,\"charisma_exp_mult\":1.3657735077501927,\"company_rep_mult\":1.0796628519764369,\"faction_rep_mult\":1.0796628519764369,\"money\":27439630926.507725,\"city\":\"New Tokyo\",\"location\":\"Noodle Bar\",\"jobs\":{\"Joe's Guns\":\"Part-time Employee\",\"National Security Agency\":\"Software Engineering Intern\"},\"companyName\":\"National Security Agency\",\"currentServer\":\"home\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":151,\"moneyGainRatePerSecond\":2234.3272639868956,\"onlineTimeSeconds\":87054.19999980344,\"ram\":16,\"totalMoneyGenerated\":175152632.45644575,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":151,\"moneyGainRatePerSecond\":2234.3272639868956,\"onlineTimeSeconds\":87051.19999980349,\"ram\":16,\"totalMoneyGenerated\":174898506.7929356,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":151,\"moneyGainRatePerSecond\":2234.3272639868956,\"onlineTimeSeconds\":87048.19999980355,\"ram\":16,\"totalMoneyGenerated\":174641027.38631657,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":151,\"moneyGainRatePerSecond\":2234.3272639868956,\"onlineTimeSeconds\":87045.1999998036,\"ram\":16,\"totalMoneyGenerated\":174465108.44633353,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":151,\"moneyGainRatePerSecond\":2234.3272639868956,\"onlineTimeSeconds\":87042.19999980365,\"ram\":16,\"totalMoneyGenerated\":174374731.24628356,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":151,\"moneyGainRatePerSecond\":2234.3272639868956,\"onlineTimeSeconds\":87039.19999980369,\"ram\":16,\"totalMoneyGenerated\":174294887.72759208,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":151,\"moneyGainRatePerSecond\":2234.3272639868956,\"onlineTimeSeconds\":87036.19999980375,\"ram\":16,\"totalMoneyGenerated\":174272524.5125972,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":151,\"moneyGainRatePerSecond\":2234.3272639868956,\"onlineTimeSeconds\":87033.19999980381,\"ram\":16,\"totalMoneyGenerated\":174260271.31838316,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":151,\"moneyGainRatePerSecond\":2234.3272639868956,\"onlineTimeSeconds\":61604.79999983098,\"ram\":16,\"totalMoneyGenerated\":137598448.9633737,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":151,\"moneyGainRatePerSecond\":2234.3272639868956,\"onlineTimeSeconds\":61601.79999983097,\"ram\":16,\"totalMoneyGenerated\":137598436.7342949,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":151,\"moneyGainRatePerSecond\":2234.3272639868956,\"onlineTimeSeconds\":61598.79999983096,\"ram\":16,\"totalMoneyGenerated\":137598424.50521606,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":151,\"moneyGainRatePerSecond\":2234.3272639868956,\"onlineTimeSeconds\":61595.799999830946,\"ram\":16,\"totalMoneyGenerated\":137598412.27613726,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":151,\"moneyGainRatePerSecond\":2234.3272639868956,\"onlineTimeSeconds\":61592.79999983094,\"ram\":16,\"totalMoneyGenerated\":137598400.04705846,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":151,\"moneyGainRatePerSecond\":2234.3272639868956,\"onlineTimeSeconds\":61589.799999830924,\"ram\":16,\"totalMoneyGenerated\":137598387.81797966,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":8,\"level\":151,\"moneyGainRatePerSecond\":2234.3272639868956,\"onlineTimeSeconds\":61586.79999983092,\"ram\":16,\"totalMoneyGenerated\":137598375.58890086,\"name\":\"hacknet-node-14\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"Netburners\",\"Aevum\",\"BitRunners\",\"Sector-12\",\"Tian Di Hui\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":7,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting I\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.0796628519764369,\"crime_success_mult\":1.0796628519764369,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"BitRunners\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.4076257222770679,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.9346004585313976,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":23851.240837299054,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":54160.72598764315,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":25,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":12479400,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.0796628519764369,\"hacknet_node_money_mult\":2.7230109310769466,\"hacknet_node_purchase_cost_mult\":0.7080537299095109,\"hacknet_node_ram_cost_mult\":0.9255604312542626,\"hacknet_node_core_cost_mult\":0.9255604312542626,\"hacknet_node_level_cost_mult\":0.7867263665661232,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1640199463868,\"totalPlaytime\":580032200,\"playtimeSinceLastAug\":87084800,\"playtimeSinceLastBitnode\":580032200,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-10000,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":25675658518.278324,\"hacknet\":2359548575.7907934,\"hacknet_expenses\":-285629361.1502672,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":27438630926.50772,\"work\":60445.9742756483,\"servers\":0,\"other\":-310997251.7774743,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":-10000,\"class\":-4398009.6,\"codingcontract\":225000000,\"corporation\":0,\"crime\":10366685.364841074,\"gang\":0,\"hacking\":69753123018.66713,\"hacknet\":10916163043.420326,\"hacknet_expenses\":-1088028532.802638,\"hospitalization\":-1878000,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":28199086211.90123,\"work\":41513675.33514831,\"servers\":-4647404276.312332,\"other\":-934597251.777401,\"augmentations\":-46070764140.08471}},\"scriptProdSinceLastAug\":18060414967.43099,\"exploits\":[\"TimeCompression\",\"UndocumentedFunctionCall\",\"Bypass\",\"PrototypeTampering\",\"Unclickable\",\"RealityAlteration\",\"N00dles\"],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"84.8.7.2\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\",\"AutoLink.exe\"],\"ramUsed\":1953.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"customStats.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":36268.128,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":50796.209999807485,\"pid\":1,\"ramUsage\":1.8,\"server\":\"home\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"n00dles\":[604332738.464852,445500,533000,82500],\"foodnstuff\":[407997196.0584726,11000,538000,240500],\"joesguns\":[1096680486.6438324,35000,532000,332500]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":16287807.29448751,\"offlineMoneyMade\":0,\"offlineRunningTime\":36268.157999999996,\"onlineExpGained\":25937269.984416723,\"onlineMoneyMade\":2109010421.1671572,\"onlineRunningTime\":50718.80999980881,\"pid\":3,\"ramUsage\":2,\"server\":\"home\",\"threads\":500}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"yes\"],\"dataMap\":{\"joesguns\":[128861325,1575,27325,14800],\"foodnstuff\":[3891200,150,4125,2550]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":709265.0502028974,\"offlineMoneyMade\":0,\"offlineRunningTime\":36037.823000000004,\"onlineExpGained\":731411.9980726668,\"onlineMoneyMade\":132752525,\"onlineRunningTime\":21257.210000042265,\"pid\":4,\"ramUsage\":2,\"server\":\"home\",\"threads\":25}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"tru\"],\"dataMap\":{\"joesguns\":[433548150,4300,53800,29750],\"foodnstuff\":[0,250,8100,5250]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1431382.6734923676,\"offlineMoneyMade\":0,\"offlineRunningTime\":36037.826,\"onlineExpGained\":1467554.8174196156,\"onlineMoneyMade\":433548150,\"onlineRunningTime\":21229.610000042165,\"pid\":5,\"ramUsage\":2,\"server\":\"home\",\"threads\":50}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[true],\"dataMap\":{\"joesguns\":[291215160,3480,64560,36060],\"foodnstuff\":[20694240,300,9960,6120]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1690240.8720339749,\"offlineMoneyMade\":0,\"offlineRunningTime\":36037.831000000006,\"onlineExpGained\":1746071.9490132246,\"onlineMoneyMade\":311909400,\"onlineRunningTime\":21223.01000004214,\"pid\":6,\"ramUsage\":2,\"server\":\"home\",\"threads\":60}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"tro\"],\"dataMap\":{\"joesguns\":[261194280,4080,64860,35820],\"foodnstuff\":[0,180,10080,6060]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1693668.4758245498,\"offlineMoneyMade\":0,\"offlineRunningTime\":36037.837,\"onlineExpGained\":1752711.5090573218,\"onlineMoneyMade\":261194280,\"onlineRunningTime\":21216.210000042116,\"pid\":7,\"ramUsage\":2,\"server\":\"home\",\"threads\":60}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"tron\"],\"dataMap\":{\"joesguns\":[895231776.9813279,12160,166560,99040],\"foodnstuff\":[12941099.500809982,480,27360,15840]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":4479892.282282339,\"offlineMoneyMade\":0,\"offlineRunningTime\":36037.846000000005,\"onlineExpGained\":4663141.319489089,\"onlineMoneyMade\":908172876.4821379,\"onlineRunningTime\":21211.4100000421,\"pid\":8,\"ramUsage\":2,\"server\":\"home\",\"threads\":160}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"bucko\"],\"dataMap\":{\"joesguns\":[271771720,2720,43040,24000],\"foodnstuff\":[12375240,160,6960,3840]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1122638.891026973,\"offlineMoneyMade\":0,\"offlineRunningTime\":36037.85,\"onlineExpGained\":1166657.4384412859,\"onlineMoneyMade\":284146960,\"onlineRunningTime\":21202.610000042067,\"pid\":9,\"ramUsage\":2,\"server\":\"home\",\"threads\":40}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"bucki\"],\"dataMap\":{\"joesguns\":[253381640,2880,43280,23880],\"foodnstuff\":[20816200,320,6480,4200]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1123400.7055339636,\"offlineMoneyMade\":0,\"offlineRunningTime\":36037.856,\"onlineExpGained\":1172191.0770552321,\"onlineMoneyMade\":274197840,\"onlineRunningTime\":21189.61000004202,\"pid\":10,\"ramUsage\":2,\"server\":\"home\",\"threads\":40}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"buckin\"],\"dataMap\":{\"joesguns\":[185964320,2680,42600,24120],\"foodnstuff\":[19913920,240,6400,4280]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1118831.2814581227,\"offlineMoneyMade\":0,\"offlineRunningTime\":36037.867000000006,\"onlineExpGained\":1165755.6963689257,\"onlineMoneyMade\":205878240,\"onlineRunningTime\":21186.210000042007,\"pid\":11,\"ramUsage\":2,\"server\":\"home\",\"threads\":40}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"masterMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2056.6100000003207,\"pid\":56,\"ramUsage\":2,\"server\":\"home\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//original from:\\n//https://bitburner.readthedocs.io/en/latest/netscript/netscripthacknetnodeapi.html\\nexport async function main(ns) {\\n\\tfunction myMoney() {\\n\\t\\treturn ns.getServerMoneyAvailable(\\\"home\\\");\\n\\t}\\n\\n\\tns.disableLog(\\\"getServerMoneyAvailable\\\");\\n\\tns.disableLog(\\\"sleep\\\");\\n\\n\\tconst cnt = ns.args[0] || Math.max(8, ns.hacknet.numNodes()); //count of hacknet nodes\\n\\tconst maxLevel = ns.args[1] || 100;\\n\\tconst maxRam = ns.args[2] || 16;\\n\\tconst maxCores = ns.args[3] || 8;\\n\\n\\twhile (ns.hacknet.numNodes() < cnt) {\\n\\t\\tlet res = ns.hacknet.purchaseNode();\\n\\t\\tns.print(\\\"-*-Purchased hacknet Node with index \\\" + res);\\n\\t\\tawait ns.sleep(100)\\n\\t};\\n\\tns.print(`**All [${cnt}] nodes bought.`);\\n\\n\\tfor (var i = 0; i < cnt; i++) {\\n\\t\\twhile (ns.hacknet.getNodeStats(i).level <= maxLevel) {\\n\\t\\t\\tvar cost = ns.hacknet.getLevelUpgradeCost(i, 1);\\n\\t\\t\\twhile (myMoney() < cost) {\\n\\t\\t\\t\\tns.print(\\\"LEVEL: Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\n\\t\\t\\t\\tawait ns.sleep(3000);\\n\\t\\t\\t}\\n\\t\\t\\tlet res = ns.hacknet.upgradeLevel(i, 1);\\n\\t\\t\\tns.print(`-*-Upgraded LEVEL of Node (${i}): ${res}`);\\n\\t\\t};\\n\\t};\\n\\n\\tns.print(`**All [${cnt}] nodes upgraded to level [${maxLevel}]`);\\n\\n\\tfor (var i = 0; i < cnt; i++) {\\n\\t\\twhile (ns.hacknet.getNodeStats(i).ram < maxRam) {\\n\\t\\t\\tvar cost = ns.hacknet.getRamUpgradeCost(i, 1);\\n\\t\\t\\twhile (myMoney() < cost) {\\n\\t\\t\\t\\tns.print(\\\"RAM: Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\n\\t\\t\\t\\tawait ns.sleep(3000);\\n\\t\\t\\t}\\n\\t\\t\\tlet res = ns.hacknet.upgradeRam(i, 1);\\n\\t\\t\\tns.print(`-*-Upgraded RAM of Node (${i}): ${res}`);\\n\\t\\t};\\n\\t};\\n\\n\\tns.print(`**All [${cnt}] nodes upgraded to [${maxRam}]GB RAM`);\\n\\n\\tfor (var i = 0; i < cnt; i++) {\\n\\t\\twhile (ns.hacknet.getNodeStats(i).cores < maxCores) {\\n\\t\\t\\tvar cost = ns.hacknet.getCoreUpgradeCost(i, 1);\\n\\t\\t\\twhile (myMoney() < cost) {\\n\\t\\t\\t\\tns.print(\\\"CORES: Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\n\\t\\t\\t\\tawait ns.sleep(3000);\\n\\t\\t\\t}\\n\\t\\t\\tlet res = ns.hacknet.upgradeCore(i, 1);\\n\\t\\t\\tns.print(`-*-Upgraded CORE of Node (${i}): ${res}`);\\n\\t\\t};\\n\\t};\\n\\n\\tns.print(`**All [${cnt}] nodes upgraded to [${maxCores}] cores`);\\n\\n\\tns.tprint(`**All [${cnt}] Hacknet cores upgraded to the max.`);\\n}\",\"filename\":\"upgradeHacknet.ns\",\"url\":\"blob:file:///0bb2f94d-4cbf-4496-b5f5-8f2c9b1f960b\",\"module\":\"\",\"dependencies\":[{\"filename\":\"upgradeHacknet.ns\",\"url\":\"blob:file:///0bb2f94d-4cbf-4496-b5f5-8f2c9b1f960b\"}],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":52}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//https://bitburner.readthedocs.io/en/latest/netscript/advancedfunctions/autocomplete.html\\nexport function autocomplete(data, args) {\\n\\treturn [...data.servers]; // This script autocompletes the list of servers.\\n\\treturn [...data.servers, ...data.scripts]; // Autocomplete servers and scripts\\n\\t//return [\\\"low\\\", \\\"medium\\\", \\\"high\\\"]; // Autocomplete 3 specific strings.\\n}\\n\\n//returns true if succesfully hacked (gained root access)\\nexport function hackServer(ns, target) {\\n\\t//Defining things to use, also to avoid dynamic/static ram error\\n\\tlet portsOpened = 0;\\n\\tconst programs = ['BruteSSH.exe', 'FTPCrack.exe', 'relaySMTP.exe',\\n\\t\\t'HTTPWorm.exe', 'SQLInject.exe']\\n\\tconst funcs = [ns.brutessh, ns.ftpcrack, ns.relaysmtp,\\n\\tns.httpworm, ns.sqlinject]\\n\\t//open ports\\n\\tprograms.forEach((prog, idx) => {\\n\\t\\tif (ns.fileExists(prog, \\\"home\\\")) {\\n\\t\\t\\tfuncs[idx](target);//f() must be in order\\n\\t\\t\\tportsOpened++;\\n\\t\\t}\\n\\t})\\n\\t//check if enough\\n\\tlet requiredPorts = ns.getServerNumPortsRequired(target)\\n\\tif (portsOpened < requiredPorts) {\\n\\t\\tns.tprintf(`ERROR [${target}] needs more ports. Opened only ${portsOpened} out of ${requiredPorts}.`);\\n\\t\\treturn false;\\n\\t}\\n\\t//try to hack\\n\\tns.nuke(target);\\n\\n\\tif (!ns.hasRootAccess(target)) {\\n\\t\\tns.tprintf(`ERROR Couldn't hack [${target}]`)\\n\\t\\treturn false\\n\\t}\\n\\telse\\n\\t\\treturn true\\n}\\n\\n//tries to hack a server and load moneymaker script into it\\nexport async function main(ns) {\\n\\tvar target = ns.args[0];\\n\\tvar script = ns.args[1] || 'moneyMaker.ns';\\n\\tif (!ns.serverExists(target)) {\\n\\t\\tns.tprint(`ERROR: Server ${target} does not exist`)\\n\\t\\treturn\\n\\t}\\n\\t//start hacking\\n\\tif (!hackServer(ns, target)) {\\n\\t\\tns.tprint(`ERROR: Server ${target} coudln't be hacked.`)\\n\\t\\treturn\\n\\t}\\n\\n\\tlet ans = await ns.scp(script, target);\\n\\tif (ans)\\n\\t\\tns.tprint(`The server ${target} has been successfully hacked, ${script} is waiting to be run`)\\n\\telse\\n\\t\\tns.tprint(`ERROR with: ${target}. ${script} Couldn't be copied `)\\n}\",\"filename\":\"hackServer.ns\",\"url\":\"blob:file:///19328778-d618-4a1e-b2e4-74d5649eca97\",\"module\":\"\",\"dependencies\":[{\"filename\":\"hackServer.ns\",\"url\":\"blob:file:///19328778-d618-4a1e-b2e4-74d5649eca97\"}],\"ramUsage\":2.85,\"server\":\"home\",\"moduleSequenceNumber\":53}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n// 5.25GB script\\n//Scans for all servers in the game\\n//\\tthen hacks each & makes them run \\n//\\ta moneyMaker script (targeting some server defined in the script)\\nimport { recursiveScan } from 'targetFinder.ns';\\nimport { hackServer } from 'hackServer.ns';\\n\\nexport async function main(ns) {\\n\\tconst targetMoney = ns.args[0] || 'foodnstuff';\\n\\tconst moneyScript = 'slaveMoneyMaker.ns';\\n\\tconst masterScript = 'masterMoneyMaker.ns'\\n\\tns.kill(masterScript, 'home')\\n\\tns.exec(masterScript, 'home', 1, targetMoney) //when using slave/masters to save ram\\n\\t//get all servers in the game\\n\\tlet knownServers = recursiveScan(ns, 'home');\\n\\n\\t//prepare variables\\n\\tlet cntMoneyMakers = 0;\\n\\tlet cntHackedTargets = 0;\\n\\tdelete knownServers.home;\\n\\tconst targets = Object.values(knownServers)\\n\\tns.tprintf(`INFO Target servers: ${targets}`)\\n\\t//start hacking\\n\\tfor (const target of targets) {\\n\\t\\t//if hacked, try to run moneyMaker with the most threads\\n\\t\\tif (hackServer(ns, target)) {\\n\\t\\t\\tns.tprintf(`${target} was hacked`)\\n\\t\\t\\tcntHackedTargets++\\n\\n\\t\\t\\t//now calculate threads that I can use to run moneyMaker\\n\\t\\t\\tlet maxRam = ns.getServerMaxRam(target);\\n\\t\\t\\tlet scriptRam = ns.getScriptRam(moneyScript);\\n\\t\\t\\tlet threads = Math.floor(maxRam / scriptRam);\\n\\t\\t\\tif (threads === 0) {\\n\\t\\t\\t\\tns.tprint(`WARN [${target}]${moneyScript} can't be run in this server. (0 threads)`)\\n\\t\\t\\t\\tns.tprintf(`WARN [${target}]scriptRam/maxRam\\t-\\t${scriptRam}GB/${maxRam}GB`)\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\t}\\n\\t\\t\\t//can I even hack the targetMoney server?\\n\\t\\t\\tlet myLevel = ns.getHackingLevel()\\n\\t\\t\\tlet reqLevel = ns.getServerRequiredHackingLevel(targetMoney)\\n\\t\\t\\tif (myLevel < reqLevel) {\\n\\t\\t\\t\\tns.tprint(`WARN [${targetMoney}]Hacker level too low: ${myLevel} / ${reqLevel}`)\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\t}\\n\\t\\t\\t//Try to remove previous scripts\\n\\t\\t\\tif (ns.ps(target).length > 0 && !ns.killall(target))\\n\\t\\t\\t\\tns.tprintf(`WARN [${target}]--Scripts couldn't be killed.`)\\n\\t\\t\\t//GET MONEY!!! (or try to)\\n\\t\\t\\tlet ansScp = await ns.scp(moneyScript, target)\\n\\t\\t\\tif (!ansScp) {\\n\\t\\t\\t\\tns.tprintf(`ERROR [${target}]--${moneyScript} couldn't be copied.`)\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\t}\\n\\t\\t\\tif (ns.exec(moneyScript, target, threads)) {\\n\\t\\t\\t\\tns.tprintf(`INFO [${target}]--${moneyScript} was ran successfully.`)\\n\\t\\t\\t\\tcntMoneyMakers++\\n\\t\\t\\t\\tawait ns.sleep(150) //awaiting a bit so all scripts don't rum same instructions at same time\\n\\t\\t\\t}\\n\\t\\t\\telse\\n\\t\\t\\t\\tns.tprintf(`ERROR [${target}]${moneyScript} wasn't run on target. \\n\\t\\t\\t\\tThreads: ${threads}. TargetMoney: ${targetMoney}. Ram: ${maxRam}. ScriptRam: ${scriptRam * threads}`)\\n\\t\\t}\\n\\t\\telse\\n\\t\\t\\tcontinue\\n\\t}\\n\\t//display info\\n\\tlet cntOtherServers = targets.length\\n\\tns.tprintf(`INFO 🕶️Finished hacking: ${cntHackedTargets} out of ${cntOtherServers}`)\\n\\tns.tprintf(`💵Servers making money: ${cntMoneyMakers} out of ${cntOtherServers}`)\\n\\tns.tprintf(`WARN don't forget to run ${moneyScript} on home`)\\n}\",\"filename\":\"zzzHackAll.ns\",\"url\":\"blob:file:///4829effa-9a7e-4e87-9e6e-edd537a37a7e\",\"module\":{},\"dependencies\":[{\"filename\":\"targetFinder.ns\",\"url\":\"blob:file:///0d36ecee-2e12-4521-87ea-54ae1909d8c5\"},{\"filename\":\"hackServer.ns\",\"url\":\"blob:file:///d1a85ba7-1bda-41f9-b6c7-2512d8c77756\"},{\"filename\":\"zzzHackAll.ns\",\"url\":\"blob:file:///4829effa-9a7e-4e87-9e6e-edd537a37a7e\"}],\"ramUsage\":5.75,\"server\":\"home\",\"moduleSequenceNumber\":6073}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//Exploits\\nexport async function main(ns) {\\n\\t/*\\n\\t//ns.tprint(document)\\n\\t//UNACHIEVABLE\\n\\tdocument.achievements.push(\\\"UNACHIEVABLE\\\") */\\n\\t//from extra:\\n\\t//https://github.com/danielyxie/bitburner/blob/c21644397d5ab7e3e8a23fe2f47e7c5438661b86/src/NetscriptFunctions/Extra.ts#L14\\n\\t/* \\n\\t//undocumented\\n\\tns.exploit() */\\n\\t/* \\n\\t//easter egg: get KARMA\\n\\tns.tprintf(`${ns.heart.break()}`) */\\n\\t/* \\n\\t//bypass\\n\\teval('ns.bypass(document)') */\\n\\t/* \\n\\t//Number prototype\\n\\tNumber.prototype.toExponential = function () { return \\\"\\\"; } */\\n\\t//Alter reality\\n\\t/* \\n\\tvar console = {};\\n\\tconsole.log = (string) => { window.console.log(string) }\\n\\tconsole.warn = () => { eval('console.log(this)') }\\n\\twindow.console = console; \\n\\t */\\n\\twhile (true) {\\n\\t\\tns.alterReality()\\n\\t\\tawait ns.sleep(5000)\\n\\t}\\n\\t/* \\n\\t//UNclickable //by Naroalga\\n\\t// Get div#unclickable\\n\\tlet div = eval(\\\"document.getElementById('unclickable')\\\")//.click() //click not working\\n\\t// Make div visible\\n\\tdiv.style.display = \\\"block\\\"; // none\\n\\tdiv.style.visibility = \\\"visible\\\"; // hidden\\n\\tdiv.style.backgroundColor = 'red';\\n\\n\\t// click fires after both the mousedown and\\n\\t// mouseup events have fired, in that order.\\n\\tdiv.addEventListener('mouseup', function (e) {\\n\\t\\thideElem(div); //must be outside to avoid being distroyed\\n\\t}); */\\n\\n}\\n/* \\nfunction hideElem(elem) {\\n\\t// Make elem invisible\\n\\telem.style.display = \\\"none\\\";\\n\\telem.style.visibility = \\\"hidden\\\";\\n\\telem.style.backgroundColor = '';\\n} */\",\"filename\":\"exploits.ns\",\"url\":\"blob:file:///64e72e91-cc8d-4db6-8b3e-92e6edfb60e6\",\"module\":\"\",\"dependencies\":[{\"filename\":\"exploits.ns\",\"url\":\"blob:file:///64e72e91-cc8d-4db6-8b3e-92e6edfb60e6\"}],\"ramUsage\":1.6,\"server\":\"home\",\"moduleSequenceNumber\":55}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only, no need for more threads\\n//Master script, constantly loads all data in the window to be used publicly\\nexport async function main(ns) {\\n\\tconst target = ns.args[0] || 'joesguns';//joes' most profitable?\\n\\tlet targetObj = {\\n\\t\\ttarget\\n\\t}\\n\\n\\ttargetObj.moneyThresh = ns.getServerMaxMoney(target) * 0.75;\\n\\ttargetObj.securityThresh = ns.getServerMinSecurityLevel(target) + 5;\\n\\twhile (true) {\\n\\t\\ttargetObj.serverSecurityLevel = ns.getServerSecurityLevel(target);\\n\\t\\ttargetObj.serverMoneyAvailable = ns.getServerMoneyAvailable(target);\\n\\t\\t//window.targetObj = targetObj;\\n\\t\\tlet stringOb = JSON.stringify(targetObj)\\n\\t\\teval(`window.targetObj = ${stringOb}`)\\n\\t\\t/* \\n\\t\\t\\t\\tlet ans = eval('window.targetObj')\\n\\t\\t\\t\\tconsole.log(ans)\\n\\t\\t\\t\\tns.tprintf(`${ans.target}`) */\\n\\t\\tawait ns.sleep(10);\\n\\t}\\n}\",\"filename\":\"masterMoneyMaker.ns\",\"url\":\"blob:file:///9636beb8-7c2c-449f-a4e4-6829561d2309\",\"module\":{},\"dependencies\":[{\"filename\":\"masterMoneyMaker.ns\",\"url\":\"blob:file:///9636beb8-7c2c-449f-a4e4-6829561d2309\"}],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":104}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///2f73e64b-a17f-4585-b67d-b4d3ebeac714\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///2f73e64b-a17f-4585-b67d-b4d3ebeac714\"}],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":113}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//adding info the the hud\\n//orig from bitburner-oficial/bitburner-docs, modded by me\\nexport async function main(ns) {\\n\\tconst format = (num) => ns.nFormat(num, '0.00a')\\n\\tconst doc = eval('document');\\n\\tconst hook0 = doc.getElementById('overview-extra-hook-0');\\n\\tconst hook1 = doc.getElementById('overview-extra-hook-1');\\n\\twhile (true) {\\n\\t\\ttry {\\n\\t\\t\\tconst headers = []\\n\\t\\t\\tconst values = [];\\n\\t\\t\\t// Add script income per second\\n\\t\\t\\theaders.push(\\\"📜 💲\\\");\\n\\t\\t\\t//ns.tprintf(`${ns.getScriptIncome()}`)\\n\\t\\t\\tvalues.push(`\\\\$${format(ns.getScriptIncome()[0])}/s`);\\n\\t\\t\\t// Add script exp gain rate per second\\n\\t\\t\\theaders.push(\\\"📜 xp\\\");\\n\\t\\t\\tvalues.push(`${format(ns.getScriptExpGain())}/s`);\\n\\t\\t\\t//values.push(format(ns.getScriptExpGain()) + '/s');\\n\\t\\t\\t// Add karma\\n\\t\\t\\tlet karma = ns.heart.break()\\n\\t\\t\\theaders.push(`${karma >= 0 ? '🤍' : '🖤'} Karma`);\\n\\t\\t\\tvalues.push(karma);\\n\\n\\t\\t\\t// Now drop it into the placeholder elements\\n\\t\\t\\thook0.innerText = headers.join(\\\" \\\\n\\\");\\n\\t\\t\\thook1.innerText = values.join(\\\"\\\\n\\\");\\n\\t\\t} catch (err) { // This might come in handy later\\n\\t\\t\\tns.print(\\\"ERROR: Update Skipped: \\\" + String(err));\\n\\t\\t}\\n\\t\\tawait ns.sleep(1000);\\n\\t}\\n}\",\"filename\":\"customStats.ns\",\"url\":\"blob:file:///a7140619-3418-4917-b5fc-f759c942a6b6\",\"module\":{},\"dependencies\":[{\"filename\":\"customStats.ns\",\"url\":\"blob:file:///a7140619-3418-4917-b5fc-f759c942a6b6\"}],\"ramUsage\":1.8,\"server\":\"home\",\"moduleSequenceNumber\":103}},{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//Scans for all servers in the game\\n//\\tto display data & try to find the best value\\nlet knownServers = {\\n\\thome: 'home'\\n}\\n\\nexport function autocomplete(data, args) {\\n\\t//return [...data.servers]; // This script autocompletes the list of servers.\\n\\treturn [\\\"verbose\\\"]; // Autocomplete 3 specific strings.\\n}\\n\\nexport function recursiveScan(ns, host) {\\n\\tconst targets = ns.scan(host);\\n\\t//ns.tprintf(`scanned: ${targets}`)\\n\\tfor (const target of targets) {\\n\\t\\t//ns.tprintf(`checking: ${target} -- ${knownServers[target]}`)\\n\\t\\tif (knownServers[target]) //already seen, skip\\n\\t\\t\\tcontinue\\n\\t\\telse {\\n\\t\\t\\tknownServers[target] = target\\n\\t\\t\\trecursiveScan(ns, target)\\n\\t\\t\\t//ns.tprintf(`Added: ${target}`)\\n\\t\\t}\\n\\t}\\n\\treturn { ...knownServers };\\n}\\n\\nexport function getServerContracts(ns, target) {\\n\\tlet obj = ns.ls(target, '.cct').map((file, idx) => (\\n\\t\\t{\\n\\t\\t\\ttype: ns.codingcontract.getContractType(file, target),\\n\\t\\t\\tdata: ns.codingcontract.getData(file, target),\\n\\t\\t\\tdescription: ns.codingcontract.getDescription(file, target),\\n\\t\\t\\tinitialTries: ns.codingcontract.getNumTriesRemaining(file, target),\\n\\t\\t}\\n\\t));\\n\\treturn [...obj]\\n}\\n\\nexport function getServerInfo(ns, target) { //heavy due to contracts\\n\\tconst userLevel = ns.getHackingLevel();\\n\\tlet obj = {\\n\\t\\ttarget,\\n\\t\\tmaxMoney: ns.getServerMaxMoney(target),\\n\\t\\tminSecurity: ns.getServerMinSecurityLevel(target),\\n\\t\\tlevel: ns.getServerRequiredHackingLevel(target),\\n\\t\\thackTime: ns.getHackTime(target),\\n\\t\\tgrowthTime: ns.getGrowTime(target),\\n\\t\\tweakenTime: ns.getWeakenTime(target),\\n\\t\\tgrowth: ns.getServerGrowth(target), //is 0 to 100 //Unused yet, formula unkown\\n\\t\\tfiles: ns.ls(target),\\n\\t\\t//contracts: getServerContracts(ns, target),\\n\\t}\\n\\t//parameter with which we will consider best target\\n\\tif (userLevel < obj.level)\\n\\t\\tobj.valuation = -1\\n\\telse\\n\\t\\tobj.valuation = (obj.maxMoney / obj.minSecurity) / obj.growthTime\\n\\treturn obj\\n}\\n\\nexport async function main(ns) {\\n\\tvar settings = ns.flags([\\n\\t\\t['verbose', false]\\n\\t])\\n\\n\\tlet targets = recursiveScan(ns, 'home');\\n\\tlet allServers = [...Object.values(targets)]; //to later get all contracts\\n\\tdelete targets.home;\\n\\t//maping targets to array of objects with relevant properties\\n\\ttargets = Object.values(targets).map((target) => {\\n\\t\\treturn getServerInfo(ns, target);\\n\\t});\\n\\t//ordering best to worst(in place by javascript)\\n\\ttargets.sort((a, b) => b.valuation - a.valuation)\\n\\tconst best = targets[0]\\n\\n\\t//display other servers\\n\\tif (settings.verbose) {\\n\\t\\tns.tprintf(`WARN Other targets: -------------------------------------------------------------------------------`)\\n\\t\\ttargets.forEach((item, idx) => {\\n\\t\\t\\tif (idx === 0) return\\n\\t\\t\\tns.tprintf(`[${item.target}]${JSON.stringify(item, null, 1)}`)\\n\\t\\t})\\n\\t}\\n\\n\\t//display available contracts (including home as they can spawn there)\\n\\tallServers.forEach((target, idx) => {\\n\\t\\tlet contracts = getServerContracts(ns, target);\\n\\t\\tif (contracts.length > 0)\\n\\t\\t\\tns.tprintf(`WARN [${target}] Has the following contracts:`)\\n\\t\\tcontracts.forEach((contract, i) => {\\n\\t\\t\\t//printing contract semi styled:\\n\\t\\t\\tns.tprintf(`(${i}) ${JSON.stringify(\\n\\t\\t\\t\\tcontract,\\n\\t\\t\\t\\t(key, value) => Array.isArray(value) ? `[${value}]` : value,\\n\\t\\t\\t\\t4)}`)\\n\\t\\t})\\n\\t})\\n\\tns.tprintf(`INFO Best target: ${JSON.stringify(best, null, 1)}`)\\n\\n\\treturn best\\n}\",\"filename\":\"targetFinder.ns\",\"url\":\"blob:file:///4ea6fad6-3830-47de-acf9-8815765e534b\",\"module\":\"\",\"dependencies\":[{\"filename\":\"targetFinder.ns\",\"url\":\"blob:file:///4ea6fad6-3830-47de-acf9-8815765e534b\"}],\"ramUsage\":19.6,\"server\":\"home\",\"moduleSequenceNumber\":59}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.004,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"82.2.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":43512016661,\"moneyMax\":1087800416525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1357,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"4.5.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":54895427242,\"moneyMax\":1372385681050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1321,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"25.7.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":21123161198,\"moneyMax\":528079029950,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1028,\"serverGrowth\":66}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"79.2.0.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":512,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[24789834.545884,1280,40960,27392]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":772289.3203248464,\"onlineMoneyMade\":24789834.545884,\"onlineRunningTime\":2053.8100000003233,\"pid\":75,\"ramUsage\":2,\"server\":\"blade\",\"threads\":256}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///75df2abe-1cf7-445f-ad46-89e884ddb5b2\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///75df2abe-1cf7-445f-ad46-89e884ddb5b2\"}],\"ramUsage\":2,\"server\":\"blade\",\"moduleSequenceNumber\":114}}],\"serversOnNetwork\":[\"omnitek\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":10718125957,\"moneyMax\":267953148925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1000,\"serverGrowth\":73}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"54.0.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":35603441122,\"moneyMax\":890086028050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1122,\"serverGrowth\":80}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"25.9.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"megacorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":23532270401,\"moneyMax\":588306760025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1197,\"serverGrowth\":48}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-928536.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,7,8,5,10,2,4,0,9,5,4,9,9,0,3,4,8,7,10,5],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"15.2.5.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":256,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[79810.11540371925,256,22144,12416]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":387215.3015491952,\"onlineMoneyMade\":79810.11540371925,\"onlineRunningTime\":2054.010000000323,\"pid\":74,\"ramUsage\":2,\"server\":\"omnitek\",\"threads\":128}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///770dfa7b-8272-48a8-affc-990c3283acb4\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///770dfa7b-8272-48a8-affc-990c3283acb4\"}],\"ramUsage\":2,\"server\":\"omnitek\",\"moduleSequenceNumber\":115}}],\"serversOnNetwork\":[\"vitalife\",\"blade\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":20287287188,\"moneyMax\":507182179700,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1052,\"serverGrowth\":97}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"63.9.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":17797257928,\"moneyMax\":444931448200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1185,\"serverGrowth\":83}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"32.3.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":24800980670,\"moneyMax\":620024516750,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1077,\"serverGrowth\":90}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"84.5.5.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[39681792,192,10560,6592]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":193429.21054346894,\"onlineMoneyMade\":39681792,\"onlineRunningTime\":2053.4100000003236,\"pid\":78,\"ramUsage\":2,\"server\":\"fulcrumtech\",\"threads\":64}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///43ac6f7b-7062-4878-8673-e3a95828d035\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///43ac6f7b-7062-4878-8673-e3a95828d035\"}],\"ramUsage\":2,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":116}}],\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":1603667792,\"moneyMax\":40091694800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1238,\"serverGrowth\":93}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"81.3.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1313,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-706316.cct\",\"type\":\"Total Ways to Sum\",\"data\":26,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"62.7.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1143650745,\"moneyMax\":28591268625,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":891,\"serverGrowth\":79}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-529044.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[88,163,46,105,112,154,28,180,65,47,91,169,7,90,96,188,23,71,27,54],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-270803.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[189,156,12,44,9,112,58,51,88,101,9,86,129,12,156,80,34,51,29,114,61,166,153,185,85,56,32,184,30,68,83,159,111,150,4,108,191,181,108,100,110,65,80,99,160]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"48.2.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":808648013,\"moneyMax\":20216200325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1040,\"serverGrowth\":51}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"62.0.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":886012314,\"moneyMax\":22150307850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":932,\"serverGrowth\":74}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"29.1.0.1\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":256,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[13272108.174654126,512,20992,13312]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":386144.6601624232,\"onlineMoneyMade\":13272108.174654126,\"onlineRunningTime\":2054.6100000003225,\"pid\":70,\"ramUsage\":2,\"server\":\"helios\",\"threads\":128}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///3e1d3473-90f1-4383-8553-167ea613f760\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///3e1d3473-90f1-4383-8553-167ea613f760\"}],\"ramUsage\":2,\"server\":\"helios\",\"moduleSequenceNumber\":117}}],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":749892686,\"moneyMax\":18747317150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":888,\"serverGrowth\":70}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-475377.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[27,40,49,49,2,48,49,46,45,46,18,45,48],[49,46,1,32,19,7,32,27,16,33,13,39,25],[47,8,30,7,27,2,46,49,24,19,13,30,38],[29,42,35,14,9,26,42,11,35,28,47,15,45],[29,31,12,16,23,50,19,37,39,12,29,35,3],[3,1,7,46,46,23,42,44,37,47,24,20,43],[10,30,43,17,7,29,42,40,16,38,47,30,47],[30,26,1,46,5,40,2,33,13,41,43,23,22],[37,49,3,34,33,29,37,31,42,23,30,48,48],[46,37,35,17,20,48,42,49,45,33,6,48,19],[45,22,22,37,34,42,26,47,4,23,5,12,16],[24,45,11,42,9,30,29,25,10,45,24,1,9],[35,11,43,7,20,30,21,37,26,30,25,24,16],[15,12,32,14,44,13,19,39,45,22,29,37,30],[36,7,49,44,21,37,9,31,50,31,30,14,9]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"76.5.1.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[6005216,112,2656,1632]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48401.9126936494,\"onlineMoneyMade\":6005216,\"onlineRunningTime\":2054.210000000323,\"pid\":73,\"ramUsage\":2,\"server\":\"vitalife\",\"threads\":16}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///47961c82-8a34-4e9d-8598-d721314d81b7\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///47961c82-8a34-4e9d-8598-d721314d81b7\"}],\"ramUsage\":2,\"server\":\"vitalife\",\"moduleSequenceNumber\":118}}],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":750330812,\"moneyMax\":18758270300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":811,\"serverGrowth\":70}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"93.8.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":921431326,\"moneyMax\":23035783150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":886,\"serverGrowth\":91}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-560875-TianDiHui.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[1,10,8,-8,10,-3,7,7,-3,6,2,9,8,-9,-10,4,9],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"1.4.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[52064,96,2672,1616]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48357.302635867236,\"onlineMoneyMade\":52064,\"onlineRunningTime\":2054.4100000003227,\"pid\":71,\"ramUsage\":2,\"server\":\"univ-energy\",\"threads\":16}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///5b29ff27-574f-4edb-8e7f-69967396cbd1\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///5b29ff27-574f-4edb-8e7f-69967396cbd1\"}],\"ramUsage\":2,\"server\":\"univ-energy\",\"moduleSequenceNumber\":119}}],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1194396332,\"moneyMax\":29859908300,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":833,\"serverGrowth\":80}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"36.1.8.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[22560,32,2608,1680]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48045.03223139208,\"onlineMoneyMade\":22560,\"onlineRunningTime\":2054.4100000003227,\"pid\":72,\"ramUsage\":2,\"server\":\"titan-labs\",\"threads\":16}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///563ba032-7864-4add-907e-90979e68d851\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///563ba032-7864-4add-907e-90979e68d851\"}],\"ramUsage\":2,\"server\":\"titan-labs\",\"moduleSequenceNumber\":120}}],\"serversOnNetwork\":[\"infocomm\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":793327991,\"moneyMax\":19833199775,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":871,\"serverGrowth\":69}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"31.3.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[44240,32,2624,1664]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48045.03223139208,\"onlineMoneyMade\":44240,\"onlineRunningTime\":2053.010000000324,\"pid\":81,\"ramUsage\":2,\"server\":\"microdyne\",\"threads\":16}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///4d2e95c0-5353-4c58-94ed-16bcc1ca43e6\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///4d2e95c0-5353-4c58-94ed-16bcc1ca43e6\"}],\"ramUsage\":2,\"server\":\"microdyne\",\"moduleSequenceNumber\":121}}],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":525124594,\"moneyMax\":13128114850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":851,\"serverGrowth\":82}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"4.7.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"microdyne\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":823353544,\"moneyMax\":20583838600,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":913,\"serverGrowth\":76}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"4.4.6.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":780784783,\"moneyMax\":19519619575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":845,\"serverGrowth\":73}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"49.3.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1034895222,\"moneyMax\":25872380550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":910,\"serverGrowth\":56}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"69.3.9.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[1024,128,5184,3360]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":95911.62423165549,\"onlineMoneyMade\":1024,\"onlineRunningTime\":2051.6100000003253,\"pid\":90,\"ramUsage\":2,\"server\":\"omnia\",\"threads\":32}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///35ae499f-e34f-400d-aec2-01574bd3ec91\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///35ae499f-e34f-400d-aec2-01574bd3ec91\"}],\"ramUsage\":2,\"server\":\"omnia\",\"moduleSequenceNumber\":122}}],\"serversOnNetwork\":[\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":951348051,\"moneyMax\":23783701275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":884,\"serverGrowth\":68}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"86.3.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":952507925,\"moneyMax\":23812698125,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":775,\"serverGrowth\":71}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-415933.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"2336512441\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-269868.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[191,181,186,17,185,170,117,100,155,10,190,115,117,82,134,190,26,182,105,71,100,69,54,166,158,183,99,112,174,164,57,182,157,128,87,173],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"68.7.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":750516789,\"moneyMax\":18762919725,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":796,\"serverGrowth\":72}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"8.9.6.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[5739904,320,10560,6592]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":193786.09100572625,\"onlineMoneyMade\":5739904,\"onlineRunningTime\":2053.210000000324,\"pid\":79,\"ramUsage\":2,\"server\":\"solaris\",\"threads\":64}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///9917aa49-9da3-4293-a292-f6d02c86d4e0\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///9917aa49-9da3-4293-a292-f6d02c86d4e0\"}],\"ramUsage\":2,\"server\":\"solaris\",\"moduleSequenceNumber\":123}}],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":829562349,\"moneyMax\":20739058725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":822,\"serverGrowth\":78}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"87.4.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1533702352,\"moneyMax\":38342558800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":850,\"serverGrowth\":67}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"15.9.1.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[280,40,1296,840]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24000.211086804953,\"onlineMoneyMade\":280,\"onlineRunningTime\":2051.810000000325,\"pid\":89,\"ramUsage\":2,\"server\":\"global-pharm\",\"threads\":8}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///b92db649-cca1-4e83-b035-9522223b32ad\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///b92db649-cca1-4e83-b035-9522223b32ad\"}],\"ramUsage\":2,\"server\":\"global-pharm\",\"moduleSequenceNumber\":124}}],\"serversOnNetwork\":[\"lexo-corp\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1641499816,\"moneyMax\":41037495400,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":790,\"serverGrowth\":83}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-391394.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[13,9],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"80.7.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":1243697067,\"moneyMax\":31092426675,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":794,\"serverGrowth\":82}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-325941-Netburners.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[13,16],[11,17],[22,29],[21,27],[18,25],[9,17],[16,19],[5,15],[17,22],[6,11],[9,13],[14,16],[18,24],[1,8],[5,10],[2,8]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-203617-NationalSecurityAgency.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,0,0],[0,1,0,1,0,0]],\"reward\":{\"name\":\"National Security Agency\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"97.6.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":1355079608,\"moneyMax\":33876990200,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":832,\"serverGrowth\":72}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"20.3.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[2489152,96,2688,1600]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48491.13280921373,\"onlineMoneyMade\":2489152,\"onlineRunningTime\":2053.010000000324,\"pid\":80,\"ramUsage\":2,\"server\":\"unitalife\",\"threads\":16}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///6aefd444-141f-422a-8424-34e890b4915b\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///6aefd444-141f-422a-8424-34e890b4915b\"}],\"ramUsage\":2,\"server\":\"unitalife\",\"moduleSequenceNumber\":125}}],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1050857514,\"moneyMax\":26271437850,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":804,\"serverGrowth\":72}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"72.0.2.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[4375584,96,5408,3200]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":96536.1650406058,\"onlineMoneyMade\":4375584,\"onlineRunningTime\":2051.810000000325,\"pid\":88,\"ramUsage\":2,\"server\":\"lexo-corp\",\"threads\":32}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///6191d9d9-739b-44b6-8457-43dc8501ac19\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///6191d9d9-739b-44b6-8457-43dc8501ac19\"}],\"ramUsage\":2,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":126}}],\"serversOnNetwork\":[\"zb-institute\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":719531460,\"moneyMax\":17988286500,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":690,\"serverGrowth\":61}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"96.8.2.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[4420544,64,2656,1632]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48401.9126936494,\"onlineMoneyMade\":4420544,\"onlineRunningTime\":2051.2100000003256,\"pid\":92,\"ramUsage\":2,\"server\":\"rho-construction\",\"threads\":16}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///ebac4797-5cc0-451d-ba99-ad7408131734\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///ebac4797-5cc0-451d-ba99-ad7408131734\"}],\"ramUsage\":2,\"server\":\"rho-construction\",\"moduleSequenceNumber\":127}}],\"serversOnNetwork\":[\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":686579610,\"moneyMax\":17164490250,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":479,\"serverGrowth\":60}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"85.1.8.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[8881216,384,10304,6784]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":193250.7703123403,\"onlineMoneyMade\":8881216,\"onlineRunningTime\":2055.010000000322,\"pid\":67,\"ramUsage\":2,\"server\":\"alpha-ent\",\"threads\":64}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///3ccaf852-ff41-43ea-baa2-f888164a38de\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///3ccaf852-ff41-43ea-baa2-f888164a38de\"}],\"ramUsage\":2,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":128}}],\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":700747250,\"moneyMax\":17518681250,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":581,\"serverGrowth\":53}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"16.5.6.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[2591760,80,2672,1616]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48446.52275143156,\"onlineMoneyMade\":2591760,\"onlineRunningTime\":2055.010000000322,\"pid\":68,\"ramUsage\":2,\"server\":\"aevum-police\",\"threads\":16}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///7ebc768e-dc9c-4639-8a4a-876e88e6ee91\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///7ebc768e-dc9c-4639-8a4a-876e88e6ee91\"}],\"ramUsage\":2,\"server\":\"aevum-police\",\"moduleSequenceNumber\":129}}],\"serversOnNetwork\":[\"catalyst\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":245155007,\"moneyMax\":6128875175,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":421,\"serverGrowth\":45}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"29.2.0.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[1938560,128,10752,6464]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":192893.88985008295,\"onlineMoneyMade\":1938560,\"onlineRunningTime\":2055.6100000003216,\"pid\":64,\"ramUsage\":2,\"server\":\"rothman-uni\",\"threads\":64}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///ccb682ee-20fe-479a-84b5-874d7a8fca67\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///ccb682ee-20fe-479a-84b5-874d7a8fca67\"}],\"ramUsage\":2,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":130}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":187121337,\"moneyMax\":4678033425,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":414,\"serverGrowth\":35}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"48.0.3.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[11960512,256,10496,6656]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":193072.3300812116,\"onlineMoneyMade\":11960512,\"onlineRunningTime\":2052.010000000325,\"pid\":87,\"ramUsage\":2,\"server\":\"zb-institute\",\"threads\":64}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///6c90cfee-89db-46cb-9bd4-a133cb647872\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///6c90cfee-89db-46cb-9bd4-a133cb647872\"}],\"ramUsage\":2,\"server\":\"zb-institute\",\"moduleSequenceNumber\":131}}],\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1062593444,\"moneyMax\":26564836100,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":770,\"serverGrowth\":81}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-920817-NationalSecurityAgency.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0,1,0],[0,0,0,0,0,0,0,1,0,0,0,0],[1,0,1,0,0,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,0,0,0,0,0]],\"reward\":{\"name\":\"National Security Agency\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"47.6.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[16629664,96,2640,1632]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48446.52275143156,\"onlineMoneyMade\":16629664,\"onlineRunningTime\":2051.4100000003255,\"pid\":91,\"ramUsage\":2,\"server\":\"summit-uni\",\"threads\":16}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///dfaf2396-d2a4-4322-ab33-8539284e0b60\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///dfaf2396-d2a4-4322-ab33-8539284e0b60\"}],\"ramUsage\":2,\"server\":\"summit-uni\",\"moduleSequenceNumber\":132}}],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":64,\"hackDifficulty\":64,\"minDifficulty\":21,\"moneyAvailable\":348228197,\"moneyMax\":8705704925,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":451,\"serverGrowth\":53}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"5.0.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":569075009,\"moneyMax\":14226875225,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":639,\"serverGrowth\":62}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"82.7.4.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[8043104,112,2736,1568]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48848.013271471056,\"onlineMoneyMade\":8043104,\"onlineRunningTime\":2055.210000000322,\"pid\":66,\"ramUsage\":2,\"server\":\"catalyst\",\"threads\":16}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///dd9d010e-f118-49aa-887b-fae64a9daf78\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///dd9d010e-f118-49aa-887b-fae64a9daf78\"}],\"ramUsage\":2,\"server\":\"catalyst\",\"moduleSequenceNumber\":133}}],\"serversOnNetwork\":[\"avmnite-02h\",\"alpha-ent\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":69,\"minDifficulty\":23,\"moneyAvailable\":365546481,\"moneyMax\":9138662025,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":406,\"serverGrowth\":27}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"42.2.8.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[9037920,128,5280,3296]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":96803.8253872988,\"onlineMoneyMade\":9037920,\"onlineRunningTime\":2055.8100000003215,\"pid\":62,\"ramUsage\":2,\"server\":\"the-hub\",\"threads\":32}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///98f3e7f5-568c-4663-a247-7c7593b79e2f\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///98f3e7f5-568c-4663-a247-7c7593b79e2f\"}],\"ramUsage\":2,\"server\":\"the-hub\",\"moduleSequenceNumber\":134}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":198178628,\"moneyMax\":4954465700,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":276,\"serverGrowth\":48}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"comptek\",\"httpPortOpen\":true,\"ip\":\"11.7.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"syscore\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":249013600,\"moneyMax\":6225340000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":395,\"serverGrowth\":45}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"75.0.3.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[8802240,128,10752,6464]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":192893.88985008295,\"onlineMoneyMade\":8802240,\"onlineRunningTime\":2055.6100000003216,\"pid\":63,\"ramUsage\":2,\"server\":\"netlink\",\"threads\":64}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///2a413349-1624-4669-a698-b1c2b9988dd4\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///2a413349-1624-4669-a698-b1c2b9988dd4\"}],\"ramUsage\":2,\"server\":\"netlink\",\"moduleSequenceNumber\":135}}],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":425,\"serverGrowth\":50}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"53.1.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":84442519,\"moneyMax\":2111062975,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":289,\"serverGrowth\":56}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"94.3.5.4\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[1090426,12,340,198]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6066.967858374487,\"onlineMoneyMade\":1090426,\"onlineRunningTime\":2056.6100000003207,\"pid\":57,\"ramUsage\":2,\"server\":\"n00dles\",\"threads\":2}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///1dcb7068-aa1a-42d4-a358-e23e4c9b3877\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///1dcb7068-aa1a-42d4-a358-e23e4c9b3877\"}],\"ramUsage\":2,\"server\":\"n00dles\",\"moduleSequenceNumber\":136}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"80.8.9.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[6206504,64,1336,808]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24357.09154906228,\"onlineMoneyMade\":6206504,\"onlineRunningTime\":2056.410000000321,\"pid\":58,\"ramUsage\":2,\"server\":\"foodnstuff\",\"threads\":8}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///360dba4e-2ba7-48cb-ae2d-b5a7be5ecac0\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///360dba4e-2ba7-48cb-ae2d-b5a7be5ecac0\"}],\"ramUsage\":2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":137}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":16583412.97943067,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"98.7.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[1801600,40,1376,784]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24334.786520171197,\"onlineMoneyMade\":1801600,\"onlineRunningTime\":2056.410000000321,\"pid\":59,\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"threads\":8}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///6a944783-95f2-4081-a94b-205ea57e5c3a\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///6a944783-95f2-4081-a94b-205ea57e5c3a\"}],\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":138}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"83.9.5.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[3021480,24,1328,816]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24111.73623126037,\"onlineMoneyMade\":3021480,\"onlineRunningTime\":2052.6100000003244,\"pid\":83,\"ramUsage\":2,\"server\":\"joesguns\",\"threads\":8}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///9c9c864d-16b0-4d91-8048-b64d19dcbc56\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///9c9c864d-16b0-4d91-8048-b64d19dcbc56\"}],\"ramUsage\":2,\"server\":\"joesguns\",\"moduleSequenceNumber\":139}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":6.548000000000001,\"minDifficulty\":5,\"moneyAvailable\":1693.2290173658018,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"32.7.7.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[8664208,112,2688,1600]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48803.40321368889,\"onlineMoneyMade\":8664208,\"onlineRunningTime\":2056.210000000321,\"pid\":60,\"ramUsage\":2,\"server\":\"zer0\",\"threads\":16}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///ae8f44d6-823a-4211-885e-c1a98303431f\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///ae8f44d6-823a-4211-885e-c1a98303431f\"}],\"ramUsage\":2,\"server\":\"zer0\",\"moduleSequenceNumber\":140}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"71.2.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[1024816,32,1352,800]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24223.26137571578,\"onlineMoneyMade\":1024816,\"onlineRunningTime\":2052.4100000003245,\"pid\":85,\"ramUsage\":2,\"server\":\"nectar-net\",\"threads\":8}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///dfc95eac-ba00-427a-b5aa-f22886cd4060\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///dfc95eac-ba00-427a-b5aa-f22886cd4060\"}],\"ramUsage\":2,\"server\":\"nectar-net\",\"moduleSequenceNumber\":141}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"20.4.0.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[8591728,112,2640,1632]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48491.132809213734,\"onlineMoneyMade\":8591728,\"onlineRunningTime\":2050.810000000326,\"pid\":95,\"ramUsage\":2,\"server\":\"neo-net\",\"threads\":16}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///d6fe7438-7987-4808-bd0f-42ee598fa567\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///d6fe7438-7987-4808-bd0f-42ee598fa567\"}],\"ramUsage\":2,\"server\":\"neo-net\",\"moduleSequenceNumber\":142}}],\"serversOnNetwork\":[\"CSEC\",\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"74.3.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[348544,96,5440,3168]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":96536.1650406058,\"onlineMoneyMade\":348544,\"onlineRunningTime\":2050.4100000003264,\"pid\":97,\"ramUsage\":2,\"server\":\"silver-helix\",\"threads\":32}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///a10b3977-0969-4339-973d-64fd0af686c1\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///a10b3977-0969-4339-973d-64fd0af686c1\"}],\"ramUsage\":2,\"server\":\"silver-helix\",\"moduleSequenceNumber\":143}}],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"57.3.3.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[0,16,1352,800]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24044.82114458712,\"onlineMoneyMade\":0,\"onlineRunningTime\":2052.4100000003245,\"pid\":84,\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"threads\":8}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///6290507d-5e40-4f6e-ab61-7ed0a166823a\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///6290507d-5e40-4f6e-ab61-7ed0a166823a\"}],\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":144}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"36.2.7.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[1571976,24,1360,792]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24134.04126015145,\"onlineMoneyMade\":1571976,\"onlineRunningTime\":2051.010000000326,\"pid\":93,\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"threads\":8}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///3b03b60f-4527-44e5-b4f6-d70f1911b00b\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///3b03b60f-4527-44e5-b4f6-d70f1911b00b\"}],\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":145}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"36.1.5.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[11539424,128,2640,1632]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48535.7428669959,\"onlineMoneyMade\":11539424,\"onlineRunningTime\":2052.2100000003247,\"pid\":86,\"ramUsage\":2,\"server\":\"phantasy\",\"threads\":16}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///fb3bb811-079b-4db3-823c-e06f452fd915\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///fb3bb811-079b-4db3-823c-e06f452fd915\"}],\"ramUsage\":2,\"server\":\"phantasy\",\"moduleSequenceNumber\":146}}],\"serversOnNetwork\":[\"nectar-net\",\"johnson-ortho\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"34.0.3.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[368,64,2592,1680]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":47955.81211582774,\"onlineMoneyMade\":368,\"onlineRunningTime\":2050.2100000003265,\"pid\":99,\"ramUsage\":2,\"server\":\"max-hardware\",\"threads\":16}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///6c60f843-6ce9-4544-9ed6-bec90542faaf\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///6c60f843-6ce9-4544-9ed6-bec90542faaf\"}],\"ramUsage\":2,\"server\":\"max-hardware\",\"moduleSequenceNumber\":147}}],\"serversOnNetwork\":[\"iron-gym\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"50.8.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[2210784,112,2704,1584]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48401.9126936494,\"onlineMoneyMade\":2210784,\"onlineRunningTime\":2056.0100000003213,\"pid\":61,\"ramUsage\":2,\"server\":\"omega-net\",\"threads\":16}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///3ce5b9ef-3365-4c48-8e59-d5be112ecba3\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///3ce5b9ef-3365-4c48-8e59-d5be112ecba3\"}],\"ramUsage\":2,\"server\":\"omega-net\",\"moduleSequenceNumber\":148}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":32,\"hackDifficulty\":32,\"minDifficulty\":11,\"moneyAvailable\":66903652,\"moneyMax\":1672591300,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":202,\"serverGrowth\":35}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"20.7.5.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":37,\"minDifficulty\":12,\"moneyAvailable\":41277046,\"moneyMax\":1031926150,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":270,\"serverGrowth\":30}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"12.4.5.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[0,32,2784,1536]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48268.0825203029,\"onlineMoneyMade\":0,\"onlineRunningTime\":2050.4100000003264,\"pid\":98,\"ramUsage\":2,\"server\":\"iron-gym\",\"threads\":16}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///8ba721d9-866d-4b36-8de6-ef8fb02d0d6e\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///8ba721d9-866d-4b36-8de6-ef8fb02d0d6e\"}],\"ramUsage\":2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":149}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"66.4.4.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":32,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[2809152,80,2576,1696]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48134.252346956404,\"onlineMoneyMade\":2809152,\"onlineRunningTime\":2052.810000000324,\"pid\":82,\"ramUsage\":2,\"server\":\"millenium-fitness\",\"threads\":16}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///ef8baf0d-ee7f-4642-8c80-1f09e88bb569\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///ef8baf0d-ee7f-4642-8c80-1f09e88bb569\"}],\"ramUsage\":2,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":150}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":490,\"serverGrowth\":44}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"95.4.8.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[22475168,160,5376,3200]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":96893.04550286313,\"onlineMoneyMade\":22475168,\"onlineRunningTime\":2053.8100000003233,\"pid\":76,\"ramUsage\":2,\"server\":\"powerhouse-fitness\",\"threads\":32}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///251bd13d-5a60-4dd6-ab2e-7896d72fd824\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///251bd13d-5a60-4dd6-ab2e-7896d72fd824\"}],\"ramUsage\":2,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":151}}],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1007,\"serverGrowth\":54}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-647870-Aevum.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[159,23,85,115,194,73,44,165,160,4,97,165,196,194,195,120,136,69,157,111,163,194,45,148,44,80,60,7,88,117,193,35,143,135,18,106],\"reward\":{\"name\":\"Aevum\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"49.2.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":763,\"serverGrowth\":49}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"60.4.5.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[10055328,224,5344,3232]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":97339.14608068478,\"onlineMoneyMade\":10055328,\"onlineRunningTime\":2054.8100000003224,\"pid\":69,\"ramUsage\":2,\"server\":\"run4theh111z\",\"threads\":32}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///351342f8-a936-4cb1-b7a8-5494f5ad4182\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///351342f8-a936-4cb1-b7a8-5494f5ad4182\"}],\"ramUsage\":2,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":152}}],\"serversOnNetwork\":[\"zb-def\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":512,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-279752.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-9,3,4,-3,-8,2,-10,9,-8,4,-9,4,10,3,-5,-7],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"72.4.5.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":128,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[1800256,320,10624,6528]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":193786.09100572625,\"onlineMoneyMade\":1800256,\"onlineRunningTime\":2050.610000000326,\"pid\":96,\"ramUsage\":2,\"server\":\"I.I.I.I\",\"threads\":64}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///e7ec6f58-fa04-4253-8b8a-2cf6d3cc1fba\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///e7ec6f58-fa04-4253-8b8a-2cf6d3cc1fba\"}],\"ramUsage\":2,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":153}}],\"serversOnNetwork\":[\"comptek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":347,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"55.3.1.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[1681816,32,1280,856]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24111.73623126037,\"onlineMoneyMade\":1681816,\"onlineRunningTime\":2055.410000000322,\"pid\":65,\"ramUsage\":2,\"server\":\"avmnite-02h\",\"threads\":8}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///cb04ba6d-060c-440a-86e1-d17375905ca2\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///cb04ba6d-060c-440a-86e1-d17375905ca2\"}],\"ramUsage\":2,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":154}}],\"serversOnNetwork\":[\"omega-net\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":203,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"16.1.0.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":16,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[2160,24,1360,792]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24134.041260151454,\"onlineMoneyMade\":2160,\"onlineRunningTime\":2053.6100000003235,\"pid\":77,\"ramUsage\":2,\"server\":\".\",\"threads\":8}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///5273171f-45e1-472f-a16f-3a4644aa7c38\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///5273171f-45e1-472f-a16f-3a4644aa7c38\"}],\"ramUsage\":2,\"server\":\".\",\"moduleSequenceNumber\":155}}],\"serversOnNetwork\":[\"vitalife\",\"b-and-a\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":526,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"64.8.7.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"foodnstuff\":[0,8,672,404]},\"filename\":\"slaveMoneyMaker.ns\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12022.41057229356,\"onlineMoneyMade\":0,\"onlineRunningTime\":2051.010000000326,\"pid\":94,\"ramUsage\":2,\"server\":\"CSEC\",\"threads\":4}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n//2GB only\\n//Minimal moneyMaker script, only depends on data fed by a master script in window\\nexport async function main(ns) {\\n\\twhile (true) {\\n\\t\\t//getting object\\n\\t\\tlet targetObj = eval('window.targetObj');\\n\\t\\twhile (!targetObj) {\\n\\t\\t\\tns.tprint(`ERROR targetObj not found in window`);\\n\\t\\t\\tawait ns.sleep(20 * 1000)\\n\\t\\t}\\n\\n\\t\\t//get parameters from object\\n\\t\\tlet { target, securityThresh, serverSecurityLevel,\\n\\t\\t\\tmoneyThresh, serverMoneyAvailable } = targetObj;\\n\\n\\t\\t//run relevant script\\n\\t\\tif (serverSecurityLevel > securityThresh)\\n\\t\\t\\tawait ns.weaken(target);\\n\\t\\telse if (serverMoneyAvailable < moneyThresh)\\n\\t\\t\\tawait ns.grow(target);\\n\\t\\telse\\n\\t\\t\\tawait ns.hack(target);\\n\\t}\\n}\",\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///deefe79a-f450-465e-b5d7-b3b7e524ea8c\",\"module\":{},\"dependencies\":[{\"filename\":\"slaveMoneyMaker.ns\",\"url\":\"blob:file:///deefe79a-f450-465e-b5d7-b3b7e524ea8c\"}],\"ramUsage\":2,\"server\":\"CSEC\",\"moduleSequenceNumber\":156}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"neo-net\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":56,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"46.2.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"82.7.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"63.5.9.1\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":26,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":258.79208934456705,\"favor\":84,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":12001.056803946167,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":212455.14088729437}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":126.8284,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":145.9705,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":72783.74886308429}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":129.5334,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":68546.77160623351}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":100.0429,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":76635.24017310356}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":2939.665438635611}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":76.8504,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":true}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":true}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":15,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":90,\"CodeInstructionRunTime\":10,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":100,\"MaxPortCapacity\":20,\"MaxTerminalCapacity\":400,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"MonacoVim\":false,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"}}","VersionSave":"7","AllGangsSave":"","LastExportBonus":"1640112365045","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}